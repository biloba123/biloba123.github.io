<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>吕晴阳在这瞎写</title>
    <link>http://yoursite.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>走过的人说树枝长了，走过的人说树枝在长</description>
    <pubDate>Wed, 11 Oct 2017 14:10:01 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Android平台MQTT使用并实现简单聊天室</title>
      <link>http://yoursite.com/2017/10/11/Android%E5%B9%B3%E5%8F%B0MQTT%E4%BD%BF%E7%94%A8%E5%B9%B6%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E8%81%8A%E5%A4%A9%E5%AE%A4/</link>
      <guid>http://yoursite.com/2017/10/11/Android%E5%B9%B3%E5%8F%B0MQTT%E4%BD%BF%E7%94%A8%E5%B9%B6%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E8%81%8A%E5%A4%A9%E5%AE%A4/</guid>
      <pubDate>Wed, 11 Oct 2017 14:08:37 GMT</pubDate>
      <description>
      
        &lt;p&gt;在上一篇文章介绍了MQTT的原理以及其在NodeMCU上运用实现一些简单的物联网&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/701f4d31029f&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/701f4d31029f&lt;/a&gt;&lt;br&gt;但没讲Android APP怎么实现的，那这篇将介绍MQTT协议在Android平台的运用，除了可以用来控制智能硬件，还常实现消息推送和即时通讯im。下面的例子用它来实现一个简单的聊天室&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>在上一篇文章介绍了MQTT的原理以及其在NodeMCU上运用实现一些简单的物联网<br><a href="http://www.jianshu.com/p/701f4d31029f" target="_blank" rel="external">http://www.jianshu.com/p/701f4d31029f</a><br>但没讲Android APP怎么实现的，那这篇将介绍MQTT协议在Android平台的运用，除了可以用来控制智能硬件，还常实现消息推送和即时通讯im。下面的例子用它来实现一个简单的聊天室<br><a id="more"></a></p><h3 id="Android中使用MQTT协议"><a href="#Android中使用MQTT协议" class="headerlink" title="Android中使用MQTT协议"></a>Android中使用MQTT协议</h3><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><p>在gradle中添加依赖，引入相应的库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">  ...</div><div class="line">  compile &apos;commons-codec:commons-codec:1.5&apos;</div><div class="line">  compile &apos;org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.0.2&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="权限声明"><a href="#权限声明" class="headerlink" title="权限声明"></a>权限声明</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.WAKE_LOCK&quot;/&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot;/&gt;</div></pre></td></tr></table></figure><p>这些权限不是危险权限，不用运行时申请</p><h4 id="MQTT支持类"><a href="#MQTT支持类" class="headerlink" title="MQTT支持类"></a>MQTT支持类</h4><p>MqttAsyncClient是mqtt支持类，创建时要要传入服务器host，port以及设备标识clientID（不同设备id不能相同）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">MqttAsyncClient mqttClient=new MqttAsyncClient(&quot;tcp://&quot;+this.host+&quot;:&quot;+this.port ,</div><div class="line">                    &quot;ClientID&quot;+this.clientID, new MemoryPersistence());</div></pre></td></tr></table></figure></p><p>接着连接服务器，并对连接状态进行监听<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//注意接口回调都是在非主线程，不能直接进行ui操作</div><div class="line">mqttClient.connect(getOptions(), null, new IMqttActionListener() &#123;</div><div class="line">        @Override</div><div class="line">        public void onSuccess(IMqttToken asyncActionToken) &#123;</div><div class="line">            //连接成功</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onFailure(IMqttToken asyncActionToken, Throwable exception) &#123;</div><div class="line">            //连接失败</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure></p><p>getOptions()方法是对连接信息进行配置，如用户名，密码（一般服务器内不设）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">     * 设置Mqtt的连接信息</div><div class="line">     */</div><div class="line">    private MqttConnectOptions getOptions()&#123;</div><div class="line">        MqttConnectOptions options = new MqttConnectOptions();</div><div class="line">        options.setCleanSession(true);//重连不保持状态</div><div class="line">        if(this.userID!=null &amp;&amp; this.userID.length()&gt;0 &amp;&amp; this.passWord!=null &amp;&amp; this.passWord.length()&gt;0)&#123;</div><div class="line">            options.setUserName(this.userID);//设置服务器账号密码</div><div class="line">            options.setPassword(this.passWord.toCharArray());</div><div class="line">        &#125;</div><div class="line">        options.setConnectionTimeout(10);//设置连接超时时间</div><div class="line">        options.setKeepAliveInterval(30);//设置保持活动时间，超过时间没有消息收发将会触发ping消息确认</div><div class="line">        return options;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>最后对消息及连接进行监听<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">//注意接口回调都是在非主线程，不能直接进行ui操作</div><div class="line">mqttClient.setCallback(new MqttCallback() &#123;</div><div class="line">                @Override</div><div class="line">                public void connectionLost(Throwable cause) &#123;</div><div class="line">                    //丢失连接</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                @Override</div><div class="line">                public void messageArrived(String topic, MqttMessage message) throws Exception &#123;</div><div class="line">                    //接到推送消息</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                @Override</div><div class="line">                public void deliveryComplete(IMqttDeliveryToken token) &#123;</div><div class="line">                    //发送消息成功到达</div><div class="line">                &#125;</div><div class="line">            &#125;);</div></pre></td></tr></table></figure></p><p>获取并配置好MqttAsyncClient 后就可以调用相应方法订阅Topic接收消息<br>subscribe(String topicFilter, int qos)<br>发送某个Topic的消息<br>publish(String topic, byte[] payload, int qos, boolean retained)</p><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p>为了方便使用，对相关操作进行封装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Author：LvQingYang</div><div class="line"> * Date：2017/8/29</div><div class="line"> * Email：biloba12345@gamil.com</div><div class="line"> * Github：https://github.com/biloba123</div><div class="line"> * Info：MQTT操作类</div><div class="line"> */</div><div class="line"></div><div class="line">public class MyMqtt &#123;</div><div class="line">    private String TAG = &quot;MyMqtt&quot;;</div><div class="line"></div><div class="line">    /**MQTT配置参数**/</div><div class="line">    private static String host = &quot;****************&quot;;</div><div class="line">    private static String port = &quot;*****&quot;;</div><div class="line">    private static String userID = &quot;&quot;;</div><div class="line">    private static String passWord = &quot;&quot;;</div><div class="line">    private static String clientID =  UUID.randomUUID().toString();</div><div class="line"></div><div class="line"></div><div class="line">    /**MQTT状态信息**/</div><div class="line">    private boolean isConnect = false;</div><div class="line"></div><div class="line">    /**MQTT支持类**/</div><div class="line">    private MqttAsyncClient mqttClient=null;</div><div class="line"></div><div class="line">    private MqttListener mMqttListener;</div><div class="line"></div><div class="line">    private Handler mHandler=new Handler(new Handler.Callback() &#123;</div><div class="line">        @Override</div><div class="line">        public boolean handleMessage(Message message) &#123;</div><div class="line">            switch (message.arg1) &#123;</div><div class="line">                case MqttTag.MQTT_STATE_CONNECTED:</div><div class="line">                    if (BuildConfig.DEBUG) Log.d(TAG, &quot;handleMessage: connected&quot;);</div><div class="line">                    mMqttListener.onConnected();</div><div class="line">                    break;</div><div class="line">                case MqttTag.MQTT_STATE_FAIL:</div><div class="line">                    if (BuildConfig.DEBUG) Log.d(TAG, &quot;handleMessage: fail&quot;);</div><div class="line">                    mMqttListener.onFail();</div><div class="line">                    break;</div><div class="line">                case MqttTag.MQTT_STATE_LOST:</div><div class="line">                    if (BuildConfig.DEBUG) Log.d(TAG, &quot;handleMessage: lost&quot;);</div><div class="line">                    mMqttListener.onLost();</div><div class="line">                    break;</div><div class="line">                case MqttTag.MQTT_STATE_RECEIVE:</div><div class="line">                    if (BuildConfig.DEBUG) Log.d(TAG, &quot;handleMessage: receive&quot;);</div><div class="line">                    mMqttListener.onReceive((String) message.obj);</div><div class="line">                    break;</div><div class="line">                case MqttTag.MQTT_STATE_SEND_SUCC:</div><div class="line">                    if (BuildConfig.DEBUG) Log.d(TAG, &quot;handleMessage: send&quot;);</div><div class="line">                    mMqttListener.onSendSucc();</div><div class="line">                    break;</div><div class="line">            &#125;</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 自带的监听类，判断Mqtt活动变化</div><div class="line">     */</div><div class="line">    private IMqttActionListener mIMqttActionListener=new IMqttActionListener() &#123;</div><div class="line">        @Override</div><div class="line">        public void onSuccess(IMqttToken asyncActionToken) &#123;</div><div class="line">            isConnect=true;</div><div class="line">            Message msg=new Message();</div><div class="line">            msg.arg1=MqttTag.MQTT_STATE_CONNECTED;</div><div class="line">            mHandler.sendMessage(msg);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onFailure(IMqttToken asyncActionToken, Throwable exception) &#123;</div><div class="line">            isConnect=false;</div><div class="line">            Message msg=new Message();</div><div class="line">            msg.arg1=MqttTag.MQTT_STATE_FAIL;</div><div class="line">            mHandler.sendMessage(msg);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 自带的监听回传类</div><div class="line">     */</div><div class="line">    private MqttCallback mMqttCallback=new MqttCallback() &#123;</div><div class="line">        @Override</div><div class="line">        public void connectionLost(Throwable cause) &#123;</div><div class="line">            isConnect=false;</div><div class="line">            Message msg=new Message();</div><div class="line">            msg.arg1=MqttTag.MQTT_STATE_LOST;</div><div class="line">            mHandler.sendMessage(msg);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void messageArrived(String topic, MqttMessage message) throws Exception &#123;</div><div class="line">            Message msg=new Message();</div><div class="line">            msg.arg1=MqttTag.MQTT_STATE_RECEIVE;</div><div class="line">            msg.obj=new String(message.getPayload());</div><div class="line">            mHandler.sendMessage(msg);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void deliveryComplete(IMqttDeliveryToken token) &#123;</div><div class="line">            Message msg=new Message();</div><div class="line">            msg.arg1=MqttTag.MQTT_STATE_SEND_SUCC;</div><div class="line">            mHandler.sendMessage(msg);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    public MyMqtt(MqttListener lis)&#123;</div><div class="line">        mMqttListener=lis;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void setMqttSetting(String host, String port, String userID, String passWord, String clientID)&#123;</div><div class="line">        MyMqtt.host = host;</div><div class="line">        MyMqtt.port = port;</div><div class="line">        MyMqtt.userID = userID;</div><div class="line">        MyMqtt.passWord = passWord;</div><div class="line">        MyMqtt.clientID = clientID;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 进行Mqtt连接</div><div class="line">     */</div><div class="line">    public void connectMqtt()&#123;</div><div class="line">        try &#123;</div><div class="line">            mqttClient=new MqttAsyncClient(&quot;tcp://&quot;+this.host+&quot;:&quot;+this.port ,</div><div class="line">                    &quot;ClientID&quot;+this.clientID, new MemoryPersistence());</div><div class="line">            mqttClient.connect(getOptions(), null, mIMqttActionListener);</div><div class="line">            mqttClient.setCallback(mMqttCallback);</div><div class="line">        &#125; catch (MqttException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 断开Mqtt连接重新连接</div><div class="line">     */</div><div class="line">    public void reStartMqtt()&#123;</div><div class="line">        disConnectMqtt();</div><div class="line">        connectMqtt();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 断开Mqtt连接</div><div class="line">     */</div><div class="line">    public void disConnectMqtt()&#123;</div><div class="line">        try &#123;</div><div class="line">            mqttClient.disconnect();</div><div class="line">            mqttClient = null;</div><div class="line">            isConnect = false;</div><div class="line">        &#125; catch (MqttException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 向Mqtt服务器发送数据</div><div class="line">     */</div><div class="line">    public void pubMsg(String Topic, String Msg, int Qos)&#123;</div><div class="line">        if(!isConnect)&#123;</div><div class="line">            Log.d(TAG,&quot;Mqtt连接未打开&quot;);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        try &#123;</div><div class="line">            /** Topic,Msg,Qos,Retained**/</div><div class="line">            mqttClient.publish(Topic,Msg.getBytes(),Qos,false);</div><div class="line">        &#125; catch (MqttException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 向Mqtt服务器发送数据</div><div class="line">     */</div><div class="line">    public void pubMsg(String Topic, byte[] Msg, int Qos)&#123;</div><div class="line">        if(!isConnect)&#123;</div><div class="line">            Log.d(TAG,&quot;Mqtt连接未打开&quot;);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        try &#123;</div><div class="line">            /** Topic,Msg,Qos,Retained**/</div><div class="line">            mqttClient.publish(Topic,Msg,Qos,false);</div><div class="line">        &#125; catch (MqttException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 向Mqtt服务器订阅某一个Topic</div><div class="line">     */</div><div class="line">    public void subTopic(String Topic, int Qos)&#123;</div><div class="line">        if(!isConnect)&#123;</div><div class="line">            Log.d(TAG,&quot;Mqtt连接未打开&quot;);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        try &#123;</div><div class="line">            mqttClient.subscribe(Topic,Qos);</div><div class="line">        &#125; catch (MqttException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 设置Mqtt的连接信息</div><div class="line">     */</div><div class="line">    private MqttConnectOptions getOptions()&#123;</div><div class="line">        MqttConnectOptions options = new MqttConnectOptions();</div><div class="line">        options.setCleanSession(true);//重连不保持状态</div><div class="line">        if(this.userID!=null&amp;&amp;this.userID.length()&gt;0&amp;&amp;this.passWord!=null&amp;&amp;this.passWord.length()&gt;0)&#123;</div><div class="line">            options.setUserName(this.userID);//设置服务器账号密码</div><div class="line">            options.setPassword(this.passWord.toCharArray());</div><div class="line">        &#125;</div><div class="line">        options.setConnectionTimeout(10);//设置连接超时时间</div><div class="line">        options.setKeepAliveInterval(30);//设置保持活动时间，超过时间没有消息收发将会触发ping消息确认</div><div class="line">        return options;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public boolean isConnect() &#123;</div><div class="line">        return isConnect;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>相关标识MqttTag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class MqttTag &#123;</div><div class="line">    public final static int MQTT_STATE_CONNECTED=1;</div><div class="line">    public final static int MQTT_STATE_LOST=2;</div><div class="line">    public final static int MQTT_STATE_FAIL=3;</div><div class="line">    public final static int MQTT_STATE_RECEIVE=4;</div><div class="line">    public final static int MQTT_STATE_SEND_SUCC=5;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>接口MqttListener<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">interface MqttListener &#123;</div><div class="line">    void onConnected();//连接成功</div><div class="line">    void onFail();//连接失败</div><div class="line">    void onLost();//丢失连接</div><div class="line">    void onReceive(String message);//接收到消息</div><div class="line">    void onSendSucc();//消息发送成功</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>运用观察者模式，创建一个Service后台监听相关状态（写的不太规范…）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line">public class MqttService extends Service implements MqttListener &#123;</div><div class="line"></div><div class="line">    private static MyMqtt mMyMqtt;</div><div class="line">    private static List&lt;MqttListener&gt; mMqttListenerList=new ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    public static void start(Context context) &#123;</div><div class="line">        Intent starter = new Intent(context, MqttService.class);</div><div class="line">        context.startService(starter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void stop(Context context) &#123;</div><div class="line">        Intent starter = new Intent(context, MqttService.class);</div><div class="line">        context.stopService(starter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onCreate() &#123;</div><div class="line">        super.onCreate();</div><div class="line">        if (mMyMqtt==null) &#123;</div><div class="line">            mMyMqtt=new MyMqtt(this);</div><div class="line">        &#125;</div><div class="line">        mMyMqtt.connectMqtt();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    @Override</div><div class="line">    public IBinder onBind(Intent intent) &#123;</div><div class="line">        // TODO: Return the communication channel to the service.</div><div class="line">        throw new UnsupportedOperationException(&quot;Not yet implemented&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onDestroy() &#123;</div><div class="line">        super.onDestroy();</div><div class="line">        mMyMqtt.disConnectMqtt();</div><div class="line">        mMyMqtt=null;</div><div class="line">        mMqttListenerList.clear();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static MyMqtt getMyMqtt()&#123;</div><div class="line">        return mMyMqtt;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void addMqttListener(MqttListener listener)&#123;</div><div class="line">        if (!mMqttListenerList.contains(listener)) &#123;</div><div class="line">            mMqttListenerList.add(listener);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void removeMqttListener(MqttListener listener)&#123;</div><div class="line">        mMqttListenerList.remove(listener);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onConnected() &#123;</div><div class="line">        for (MqttListener mqttListener : mMqttListenerList) &#123;</div><div class="line">            mqttListener.onConnected();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onFail() &#123;</div><div class="line">        new Thread(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                mMyMqtt.connectMqtt();</div><div class="line">                try &#123;</div><div class="line">                    Thread.sleep(2000);</div><div class="line">                &#125; catch (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line">        for (MqttListener mqttListener : mMqttListenerList) &#123;</div><div class="line">            mqttListener.onFail();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onLost() &#123;</div><div class="line">        new Thread(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                mMyMqtt.connectMqtt();</div><div class="line">                try &#123;</div><div class="line">                    Thread.sleep(2000);</div><div class="line">                &#125; catch (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line">        for (MqttListener mqttListener : mMqttListenerList) &#123;</div><div class="line">            mqttListener.onLost();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onReceive(String message) &#123;</div><div class="line">        for (MqttListener mqttListener : mMqttListenerList) &#123;</div><div class="line">            mqttListener.onReceive(message);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onSendSucc() &#123;</div><div class="line">        for (MqttListener mqttListener : mMqttListenerList) &#123;</div><div class="line">            mqttListener.onSendSucc();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>简单的聊天室<br><img src="http://upload-images.jianshu.io/upload_images/5734256-eaed558875497582.gif?imageMogr2/auto-orient/strip" alt=""></p><p>源码<a href="https://github.com/biloba123/ChatRoom" target="_blank" rel="external">https://github.com/biloba123/ChatRoom</a><br>开源仓库里还有些其他mqtt示例</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/10/11/Android%E5%B9%B3%E5%8F%B0MQTT%E4%BD%BF%E7%94%A8%E5%B9%B6%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E8%81%8A%E5%A4%A9%E5%AE%A4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>FragmentTabHost的使用和注意事项</title>
      <link>http://yoursite.com/2017/10/07/FragmentTabHost%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <guid>http://yoursite.com/2017/10/07/FragmentTabHost%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <pubDate>Sat, 07 Oct 2017 07:43:25 GMT</pubDate>
      <description>
      
        &lt;p&gt;一般做tab式界面我都是用的BottomNavigationView+Fragment，自己代码控制各fragment的显示和隐藏，这样做代码要多些，如果控制不当可能会在用户重返app时出现fragment重合现象。那偷懒一些的做法可以使用FragmentTabHost+Fragment来实现，只用添加相应Tab就可以，方便很多。&lt;/p&gt;
&lt;p&gt;先看实现的效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/5734256-002e2490ff07d57a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>一般做tab式界面我都是用的BottomNavigationView+Fragment，自己代码控制各fragment的显示和隐藏，这样做代码要多些，如果控制不当可能会在用户重返app时出现fragment重合现象。那偷懒一些的做法可以使用FragmentTabHost+Fragment来实现，只用添加相应Tab就可以，方便很多。</p><p>先看实现的效果：</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-002e2490ff07d57a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><a id="more"></a><h3 id="布局文件"><a href="#布局文件" class="headerlink" title="布局文件"></a>布局文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;</div><div class="line">    tools:context=&quot;com.lvqingyang.mall.MainActivity&quot;&gt;</div><div class="line"></div><div class="line">    &lt;FrameLayout</div><div class="line">        android:id=&quot;@+id/container&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;0dp&quot;</div><div class="line">        android:layout_weight=&quot;1&quot;&gt;</div><div class="line">    &lt;/FrameLayout&gt;</div><div class="line"></div><div class="line">    &lt;!--分割线--&gt;</div><div class="line">    &lt;View</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;0.5dp&quot;</div><div class="line">        android:background=&quot;@color/div_darker&quot;/&gt;</div><div class="line"></div><div class="line">    &lt;android.support.v4.app.FragmentTabHost</div><div class="line">        android:id=&quot;@android:id/tabhost&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:background=&quot;@color/tab_bg&quot;&gt;</div><div class="line">        &lt;FrameLayout</div><div class="line">            android:id=&quot;@android:id/tabcontent&quot;</div><div class="line">            android:layout_width=&quot;0dp&quot;</div><div class="line">            android:layout_height=&quot;0dp&quot;&gt;</div><div class="line">        &lt;/FrameLayout&gt;</div><div class="line">    &lt;/android.support.v4.app.FragmentTabHost&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure><p>这里注意FragmentTabHost和它的孩子FrameLayout必须使用android内部id，虽然使用上面container的FrameLayout容纳fragment但FragmentTabHost内的FrameLayout也不能省</p><h3 id="代码中初始化"><a href="#代码中初始化" class="headerlink" title="代码中初始化"></a>代码中初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">private void initTab() &#123;</div><div class="line">        mTabs=new ArrayList&lt;&gt;();</div><div class="line">        mTabs.add(new Tab(R.string.home, R.drawable.selector_home, HomeFragment.class));</div><div class="line">        mTabs.add(new Tab(R.string.hot, R.drawable.selector_hot, HotFragment.class));</div><div class="line">        mTabs.add(new Tab(R.string.classes, R.drawable.selector_classes, ClassesFragment.class));</div><div class="line">        mTabs.add(new Tab(R.string.cart, R.drawable.selector_cart, CartFragment.class));</div><div class="line">        mTabs.add(new Tab(R.string.personal, R.drawable.selector_person, PersonalFragment.class));</div><div class="line"></div><div class="line">        //setup</div><div class="line">        tabhost.setup(this, getSupportFragmentManager(), R.id.container);</div><div class="line">        mLayoutInflater=getLayoutInflater();</div><div class="line"></div><div class="line">        for (Tab tab : mTabs) &#123;</div><div class="line">            tabhost.addTab(tabhost.newTabSpec(getString(tab.getTextId()))</div><div class="line">                    .setIndicator(buildIndicator(tab)), tab.getFragment(), null);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        //remove div</div><div class="line">        tabhost.getTabWidget().setDividerDrawable(null);</div><div class="line">        tabhost.setCurrentTab(0);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private View buildIndicator(Tab tab) &#123;</div><div class="line">        View view=mLayoutInflater.inflate(R.layout.indicator, null);</div><div class="line">        TextView tvtitle = (TextView) view.findViewById(R.id.tv_title);</div><div class="line">        ImageView ivicon = (ImageView) view.findViewById(R.id.iv_icon);</div><div class="line"></div><div class="line">        ivicon.setImageResource(tab.getImgId());</div><div class="line">        tvtitle.setText(tab.getTextId());</div><div class="line"></div><div class="line">        return view;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><ul><li>Tab是简单封装每个tab的信息，包括图标、文字、对应的fragment类。</li><li>接下来要调用FragmentTabHost的setup方法，传入FragmentManager和容纳fragment的FrameLayout的id，这样它才能管理这些碎片。</li><li>addTab时,第一个参数为TabSpec（传入的tag要唯一），并为它设置indicator。</li><li>tabhost默认会在每个tab中间显示分隔线，不想要的话用<br>tabhost.getTabWidget().setDividerDrawable(null); 去掉</li><li>最后默认在第一个位置</li></ul><h3 id="图标及文字的selector"><a href="#图标及文字的selector" class="headerlink" title="图标及文字的selector"></a>图标及文字的selector</h3><p>为了让tab选择和未选择下有不同效果，要使用到selector</p><p>icon的selector<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;selector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class="line"></div><div class="line">    &lt;item android:state_pressed=&quot;true&quot; android:drawable=&quot;@mipmap/home_fill&quot;/&gt;</div><div class="line">    &lt;item android:state_selected=&quot;true&quot; android:drawable=&quot;@mipmap/home_fill&quot;/&gt;</div><div class="line">    &lt;item android:drawable=&quot;@mipmap/home&quot;/&gt;</div><div class="line"></div><div class="line">&lt;/selector&gt;</div></pre></td></tr></table></figure></p><p>文字颜色的selector（注意要放在color目录下，作为color资源，直接指定给textColor属性）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;selector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class="line"></div><div class="line">    &lt;item android:state_pressed=&quot;true&quot; android:color=&quot;#e16531&quot;/&gt;</div><div class="line">    &lt;item android:state_selected=&quot;true&quot; android:color=&quot;#e16531&quot;/&gt;</div><div class="line">    &lt;item android:color=&quot;@color/sub_text_color&quot;/&gt;</div><div class="line"></div><div class="line">&lt;/selector&gt;</div></pre></td></tr></table></figure></p><h3 id="indicator布局"><a href="#indicator布局" class="headerlink" title="indicator布局"></a>indicator布局</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">              xmlns:tools=&quot;http://schemas.android.com/tools&quot;</div><div class="line">              android:orientation=&quot;vertical&quot;</div><div class="line">              android:gravity=&quot;center&quot;</div><div class="line">              android:paddingTop=&quot;@dimen/sub_small_spacing&quot;</div><div class="line">              android:layout_width=&quot;wrap_content&quot;</div><div class="line">              android:layout_height=&quot;wrap_content&quot;&gt;</div><div class="line">    &lt;ImageView</div><div class="line">        android:id=&quot;@+id/iv_icon&quot;</div><div class="line">        android:layout_width=&quot;@dimen/indicator_icon_size&quot;</div><div class="line">        android:layout_height=&quot;@dimen/indicator_icon_size&quot;</div><div class="line">        tools:src=&quot;@mipmap/home_fill&quot;/&gt;</div><div class="line">    &lt;TextView</div><div class="line">        android:id=&quot;@+id/tv_title&quot;</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:textSize=&quot;@dimen/sub_small_text&quot;</div><div class="line">        android:layout_marginTop=&quot;@dimen/s_small_spacing&quot;</div><div class="line">        android:layout_marginBottom=&quot;@dimen/s_small_spacing&quot;</div><div class="line">        android:textColor=&quot;@color/selector_text_color&quot;</div><div class="line">        tools:text=&quot;@string/app_name&quot;/&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure><h3 id="重用view"><a href="#重用view" class="headerlink" title="重用view"></a>重用view</h3><p>上面这些代码后就能实现想要的效果，但是会发现每次选中某个fragment都会重新调用它的onCreateView方法，也就是说view不能重用，这里可以在fragment中加入几行代码缓存view，避免每次都要重建view</p><p>BaseFragment.class<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">public abstract class BaseFragment extends Fragment&#123;</div><div class="line"></div><div class="line">    private View mView;//保存View</div><div class="line">    private static final String TAG = &quot;BaseFragment&quot;;</div><div class="line">    </div><div class="line">    @Nullable</div><div class="line">    @Override</div><div class="line">    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) &#123;</div><div class="line">        if (mView == null) &#123;//为空才inflater</div><div class="line">            mView=inflaterView(inflater, container, savedInstanceState);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ViewGroup parentView= (ViewGroup) mView.getParent();</div><div class="line">        if (parentView != null) &#123;//如果有parent则移除防止重复添加</div><div class="line">            parentView.removeView(mView);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        initView(mView);</div><div class="line">        setListener();</div><div class="line">        return mView;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) &#123;</div><div class="line">        super.onViewCreated(view, savedInstanceState);</div><div class="line"></div><div class="line">        initData();</div><div class="line">        setData();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected abstract View inflaterView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState);</div><div class="line"></div><div class="line">    protected abstract void initView(View view);</div><div class="line"></div><div class="line">    protected abstract void setListener();</div><div class="line"></div><div class="line">    protected abstract void initData();</div><div class="line"></div><div class="line">    protected abstract void setData();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/10/07/FragmentTabHost%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/#disqus_thread</comments>
    </item>
    
    <item>
      <title>一步一步来，记全Github命令和用法</title>
      <link>http://yoursite.com/2017/09/15/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E6%9D%A5%EF%BC%8C%E8%AE%B0%E5%85%A8Github%E5%91%BD%E4%BB%A4%E5%92%8C%E7%94%A8%E6%B3%95/</link>
      <guid>http://yoursite.com/2017/09/15/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E6%9D%A5%EF%BC%8C%E8%AE%B0%E5%85%A8Github%E5%91%BD%E4%BB%A4%E5%92%8C%E7%94%A8%E6%B3%95/</guid>
      <pubDate>Fri, 15 Sep 2017 08:13:27 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;SSH-key配置&quot;&gt;&lt;a href=&quot;#SSH-key配置&quot; class=&quot;headerlink&quot; title=&quot;SSH key配置&quot;&gt;&lt;/a&gt;SSH key配置&lt;/h2&gt;&lt;p&gt;为了在使用github过程中重复输入用户名，密码，通常需要配置生成ssh key，并把它添加到github上，使得远程命令时github能识别我们的机器，并直接给与授权。&lt;br&gt;首先在本机生成一个ssh key&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ssh-keygen -t rsa -b 4096 -C &amp;quot;XXXX@example.com&amp;quot;     #邮箱用github注册时的邮箱&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="SSH-key配置"><a href="#SSH-key配置" class="headerlink" title="SSH key配置"></a>SSH key配置</h2><p>为了在使用github过程中重复输入用户名，密码，通常需要配置生成ssh key，并把它添加到github上，使得远程命令时github能识别我们的机器，并直接给与授权。<br>首先在本机生成一个ssh key<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -b 4096 -C &quot;XXXX@example.com&quot;     #邮箱用github注册时的邮箱</div></pre></td></tr></table></figure></p><a id="more"></a><p><img src="http://upload-images.jianshu.io/upload_images/5734256-21370905c24e0653.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>会问ssh key存放在哪里，默认路径为”/Users/用户名/.ssh”目录，直接回车<br>然后会有两个提示要求输入密码，直接回车，就没有密码，这样就生成了id_rsa和id_rsa.pub文件，存放了ssh key，通过它就可以直接访问github不需要任何密码。<br>复制id_rsa.pub的内容，到你的github账号，点开setting，选择”SSH Keys”,点”New SSH key”,将生成的key绑定上去</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-22d53f274a0b7629.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-685b69ab2ed7f850.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>通过下面命令测试是否添加成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -T git@github.com</div></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-3cdca95eb7242c0d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>输出以上信息说明操作成功</p><h2 id="项目托管–git-remote"><a href="#项目托管–git-remote" class="headerlink" title="项目托管–git remote"></a>项目托管–git remote</h2><p>比如本地有个创建好的AutoBR的项目，想把它托管到github上。那第一步需要在github上创建一个仓库</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-0f812203f07c2d43.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>获取它的地址：git@github.com:biloba123/AutoBR.git，注意地址有两种，一种https形式，另一种ssh格式，我们用ssh这样就不用输密码</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-5a4a0b8527642e2d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>然后将本地项目和该仓库关联起来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote add origin git@github.com:biloba123/AutoBR.git</div></pre></td></tr></table></figure></p><p>这样就向本地仓库添加了一个名为origin，地址是git@github.com:biloba123/AutoBR.git的远程仓库，通过” git remote -v “来查看该项目的远程仓库（一个本地仓库可以和多个远程仓库相关联）</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-64496851421da7e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="将项目推送到远程仓库–git-push"><a href="#将项目推送到远程仓库–git-push" class="headerlink" title="将项目推送到远程仓库–git push"></a>将项目推送到远程仓库–git push</h2><p>关联后，就可以和远程仓库进行数据同步，同步前想把代码提交git commit,推送用到的命令是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push  远程仓库名  本地分支:远程分支</div></pre></td></tr></table></figure></p><p>例如将本地master同步到origin的master分支上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git push origin master:master</div><div class="line"></div><div class="line">#当本地分支和远程一样时也可只写一个</div><div class="line">git push origin master</div></pre></td></tr></table></figure></p><p>删除远程分支，例如删除origin的net分支用下面命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin :net</div></pre></td></tr></table></figure></p><h2 id="更新最新代码–git-pull"><a href="#更新最新代码–git-pull" class="headerlink" title="更新最新代码–git pull"></a>更新最新代码–git pull</h2><p>直接git push把代码推送到github上并不是很好的做法，比如你和别人协作时你的代码并不是最新的，直接同步会覆盖覆盖最新代码，上面推送时就有问题</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-84bbc51f8df730bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>因为远程仓库已经有一些文件，本地项目并没和远程合并，提交被拒绝。首先应该用git pull从github将最新的代码更新到本地，并确保合并成功，如果有冲突，先解决再git push</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-0cf58c100668bb52.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>但是又出现了 fatal: refusing to merge unrelated histories ，这是git 2.9后做了一些更改，在第一次git pull会出问题，用下面命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull origin master --allow-unrelated-histories</div></pre></td></tr></table></figure></p><p>输入合并信息，在git push就可以了</p><h2 id="git-ignore忽略文件"><a href="#git-ignore忽略文件" class="headerlink" title="git ignore忽略文件"></a>git ignore忽略文件</h2><p>有些文件例如apk文件，本机相关配置文件，不需要提交到远程仓库，那就把它们添加到.gitignore文件中</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-c6d5c8bb4836910c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/09/15/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E6%9D%A5%EF%BC%8C%E8%AE%B0%E5%85%A8Github%E5%91%BD%E4%BB%A4%E5%92%8C%E7%94%A8%E6%B3%95/#disqus_thread</comments>
    </item>
    
    <item>
      <title>一步一步来，记全Git命令和用法</title>
      <link>http://yoursite.com/2017/09/14/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E6%9D%A5%EF%BC%8C%E8%AE%B0%E5%85%A8Git%E5%91%BD%E4%BB%A4%E5%92%8C%E7%94%A8%E6%B3%95/</link>
      <guid>http://yoursite.com/2017/09/14/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E6%9D%A5%EF%BC%8C%E8%AE%B0%E5%85%A8Git%E5%91%BD%E4%BB%A4%E5%92%8C%E7%94%A8%E6%B3%95/</guid>
      <pubDate>Thu, 14 Sep 2017 09:18:08 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Git基本配置&quot;&gt;&lt;a href=&quot;#Git基本配置&quot; class=&quot;headerlink&quot; title=&quot;Git基本配置&quot;&gt;&lt;/a&gt;Git基本配置&lt;/h2&gt;&lt;p&gt;Git配置使用git config分三种，存放在不同位置&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;/etc/gitconfig&lt;/td&gt;
&lt;td&gt;系统中对所有的用户都适用的配置。git config –system …&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;~/.gitconfig&lt;/td&gt;
&lt;td&gt;用户目录下的配置文件只适用该用户。git config –global …&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;当前项目下的.git/config&lt;/td&gt;
&lt;td&gt;配置只对当前项目有效。git config …&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Git基本配置"><a href="#Git基本配置" class="headerlink" title="Git基本配置"></a>Git基本配置</h2><p>Git配置使用git config分三种，存放在不同位置</p><table><thead><tr><th>文件</th><th>作用</th></tr></thead><tbody><tr><td>/etc/gitconfig</td><td>系统中对所有的用户都适用的配置。git config –system …</td></tr><tr><td>~/.gitconfig</td><td>用户目录下的配置文件只适用该用户。git config –global …</td></tr><tr><td>当前项目下的.git/config</td><td>配置只对当前项目有效。git config …</td></tr></tbody></table><a id="more"></a><p>首先要配置用户名和邮箱。每次git提交都会使用这里配置的默认信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name &quot;yourname&quot;</div><div class="line">git config --global user.email ...@example.com</div></pre></td></tr></table></figure></p><p>配置默认文本编辑器，例如emacs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global core.editor emacs</div></pre></td></tr></table></figure></p><p>配置解决差异冲突时使用哪种分析工具，例如vimdiff<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global merge.tool vimdiff</div></pre></td></tr></table></figure></p><p>检查已有配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --list</div></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-b4a893e15bc35ffe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>高亮显示一些配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git config --global color.status auto    #查看状态时高亮</div><div class="line">git config --global color.branch auto     #分支名高亮</div><div class="line">git config --global color.ui auto     #自动高亮</div></pre></td></tr></table></figure></p><p>配置别名来简化一些命令，例如checkout 简化为co，status简化为st<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global alias.co checkout</div><div class="line">git config --global alias.st status</div></pre></td></tr></table></figure></p><p>之后使用命令git checkout 时就可以简化为 git co</p><h2 id="Git基本命令"><a href="#Git基本命令" class="headerlink" title="Git基本命令"></a>Git基本命令</h2><p>环境配置好了后就可以使用了，常用的git命令就几个不用担心</p><h3 id="创建git仓库–git-inite"><a href="#创建git仓库–git-inite" class="headerlink" title="创建git仓库–git inite"></a>创建git仓库–git inite</h3><p>在项目根目录下执行git inite命令（在跟目录下右键Git Bash），会在根目录下创建隐藏.Git目录，包含相关配置和信息</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-9f18d0138b9cb20e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="查看本地仓库的状态–git-status"><a href="#查看本地仓库的状态–git-status" class="headerlink" title="查看本地仓库的状态–git status"></a>查看本地仓库的状态–git status</h3><p>使用git status或之前简化的git st，状态有三种已修改，已暂存，已修改。已修改是在工作目录也就是项目里修改还有提交保存；已暂存是指用git add命令提交到要保存的清单（暂存区域）；已提交是暂存区的文件通过git commit提交到本地git仓库；<br>由于我们新建的仓库，所有文件都没保存提交，都是已修改状态</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-4a5e89f9c28039df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="提交修改到暂存区域–git-add"><a href="#提交修改到暂存区域–git-add" class="headerlink" title="提交修改到暂存区域–git add"></a>提交修改到暂存区域–git add</h3><p>通过上面提示可以知道用git add提交，它完整命令参数复杂，只说最常见的两种。一种是添加某个文件，例如app文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add app</div></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-83c3064a82380322.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>提交目录下所有文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add .</div></pre></td></tr></table></figure></p><p>在看看现在状态</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-2b5398db78183f8c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>已变成暂存状态，并且提示可以使用git rm –cached命令将文件从追踪列表移除</p><h3 id="提交到本地仓库–git-commit"><a href="#提交到本地仓库–git-commit" class="headerlink" title="提交到本地仓库–git commit"></a>提交到本地仓库–git commit</h3><p>使用git commit将追踪列表中文件提交<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git commit -m &quot;提交说明&quot;         #形式1：通过-m提交简短信息</div><div class="line">git commit              #形式2：会跳转编辑器，在提交信息有一定格式或文字较多时用</div></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-f55edf7ee0eeac27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>现在工作区是干净的</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-5fe12bd294950c62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="查看项目历史记录–git-log"><a href="#查看项目历史记录–git-log" class="headerlink" title="查看项目历史记录–git log"></a>查看项目历史记录–git log</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log</div></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/5734256-abefe9a3826389b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="下载远程项目–git-clone"><a href="#下载远程项目–git-clone" class="headerlink" title="下载远程项目–git clone"></a>下载远程项目–git clone</h3><p>当想下载网络上别人的仓库时，可使用git clone “地址”，例如下载我github上一个EmptyHand项目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/biloba123/EmptyHand.git</div></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-0a38fe1c12e006d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>会在当前目录下新建一个EmptyHand文件存放</p><h3 id="不同分支–git-branch"><a href="#不同分支–git-branch" class="headerlink" title="不同分支–git branch"></a>不同分支–git branch</h3><p>在上面的操作都显示master，因为默认创建一个master的主分支，不同分支互不影响，当我们开发新功能时一般会新建一个分支在上面操作，因为新加功能可能会有问题最后砍掉这个功能，只有测试通过没有问题再把它合并到master分支上。<br>例如现在开发热点功能，新建一个hotspot分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch hotspot</div></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-db474e33f7795e3a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>看到现在一共两个分支，当前处于master</p><h3 id="切换分支–git-checkout"><a href="#切换分支–git-checkout" class="headerlink" title="切换分支–git checkout"></a>切换分支–git checkout</h3><p>checkout命令用于签出一个分支或者一个路径。常用于分支切换和恢复文件。列入切换到hotspot分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout hotspot</div></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-9b836964c5cef28c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>现在已经在hotspot分支，我们开发啊开发（几天过去了…），功能差不多实现了将代码保存提交</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-51057e60a1a185f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>然而，hotspot出现严重bug，只放弃它<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git checkout master    #切换回master</div><div class="line">git branch -D hotspot     #删除hotspot分支</div></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-a64f9ea385458c5d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>checkout的另一个常用功能是将文件恢复到修改之前状态。比如今天去在ConnectHotspotFragment.java文件里加了好多好多代码，然而写完发现完全不能用…，而且由于太乱之前代码也不能用了。。。<br>别担心通过下面命令可以恢复<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -- ConnectHotspotFragment.java</div></pre></td></tr></table></figure></p><h3 id="合并分支–git-merge"><a href="#合并分支–git-merge" class="headerlink" title="合并分支–git merge"></a>合并分支–git merge</h3><p>如果hotspot开发完成没bug，要将它合并到master分支上。首先提交hotspot代码，切换到主分支，再执行git merge hotspot命令，如果没冲突就能直接合并</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-d9ed7e2e3e0123cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p>合并并不能经常一帆风顺，比如我现在主要负责这个项目，然后有另一个人协助我，我就把hotspot丢给他做，我也继续在主分支上做，但如果我们同时改了MainActivity，那在合并时</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-bd0b824de7ccf3a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>看到代码里</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-80f50bf5b2de5f49.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>两个分支同时改了这里，所以git不知道该用谁的，这时就要手动合并</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-b0b0262c2641ed70.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>然后再git add和commit提交代码即可</p><h3 id="为版本打个标签–git-tag"><a href="#为版本打个标签–git-tag" class="headerlink" title="为版本打个标签–git tag"></a>为版本打个标签–git tag</h3><p>当完成所有功能并通过测试时，通常会为这个版本打个标签<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git tag -a v1.0 -m &quot;相关信息&quot;</div></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-1249a97b056b8b1b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>也可以通过” git tag -d 标签名 “来删除tag，通过” git show 标签名”查看版本具体信息</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-e566fbc1c9b60a75.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="帮助文档–git-help"><a href="#帮助文档–git-help" class="headerlink" title="帮助文档–git help"></a>帮助文档–git help</h3><p>当你不知道某个命令怎么用时，可以通过 git help 来获取其完整说明。例如查看tag命令说明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git help tag</div></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-b21472909e8ef3e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/09/14/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E6%9D%A5%EF%BC%8C%E8%AE%B0%E5%85%A8Git%E5%91%BD%E4%BB%A4%E5%92%8C%E7%94%A8%E6%B3%95/#disqus_thread</comments>
    </item>
    
    <item>
      <title>来一套不一样的Toast--自定义Toast</title>
      <link>http://yoursite.com/2017/09/13/%E6%9D%A5%E4%B8%80%E5%A5%97%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84Toast--%E8%87%AA%E5%AE%9A%E4%B9%89Toast/</link>
      <guid>http://yoursite.com/2017/09/13/%E6%9D%A5%E4%B8%80%E5%A5%97%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84Toast--%E8%87%AA%E5%AE%9A%E4%B9%89Toast/</guid>
      <pubDate>Wed, 13 Sep 2017 14:04:44 GMT</pubDate>
      <description>
      
        &lt;p&gt;Android默认ToastAndroid默认Toast只是一个简单的黑框框，有时觉得太单调了，不如自己实现一套较精致，不一样的Toast。&lt;br&gt;先看下效果（动图可能有点大）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/5734256-a2d05ae14c6c7746.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Android默认ToastAndroid默认Toast只是一个简单的黑框框，有时觉得太单调了，不如自己实现一套较精致，不一样的Toast。<br>先看下效果（动图可能有点大）：</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-a2d05ae14c6c7746.gif?imageMogr2/auto-orient/strip" alt=""></p><a id="more"></a><p>前四个是不同类型的Toast，第五个是个loading框。它们两者实现方式不同，分别进行讲解</p><h2 id="不一样的Toast"><a href="#不一样的Toast" class="headerlink" title="不一样的Toast"></a>不一样的Toast</h2><p>Toast其实并不一定要是在底部弹出的黑色小框框，它也自定义不同的样式</p><h3 id="自定义显示位置"><a href="#自定义显示位置" class="headerlink" title="自定义显示位置"></a>自定义显示位置</h3><p>toast的显示位置可以通过 方法setGravity(int gravity, int xOffset, int yOffset)来设置，<br>参数1是位置有Gravity.BOTTOM，Gravity.CENTER，Gravity.CENTER_HORIZONTAL等，参数2,3是相对于x轴，y轴的偏移量，单位为pix，如果想设置为一定数量dp，可以用以下方法将dp转换为pix<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">final float scale = getContext().getResources().getDisplayMetrics().density;</div><div class="line">int pixels = (int) (dps * scale + 0.5f);</div></pre></td></tr></table></figure></p><p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 65, getResources().getDisplayMetrics());</div></pre></td></tr></table></figure></p><p>比如来显示一个相对于屏幕中心x偏上100pix的toast<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Toast toast=Toast.makeText(this, &quot;啦啦啦~&quot;,Toast.LENGTH_SHORT);</div><div class="line">toast.setGravity(Gravity.CENTER,0,-100);</div><div class="line">toast.show();</div></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-2d080da4ec9028a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/440" alt=""></p><h3 id="加个图标"><a href="#加个图标" class="headerlink" title="加个图标"></a>加个图标</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Toast toast = Toast.makeText(getApplicationContext(),</div><div class="line">                        &quot;带图片的Toast&quot;, Toast.LENGTH_LONG);</div><div class="line">toast.setGravity(Gravity.CENTER, 0, 0);</div><div class="line">LinearLayout llToast = (LinearLayout) toast.getView();</div><div class="line">ImageView ivIcon = new ImageView(getApplicationContext());</div><div class="line">ivIcon.setImageResource(R.drawable.ic_info);</div><div class="line">llToast.addView(ivIcon, 0);</div><div class="line">toast.show();</div></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/5734256-5b0ffc3e492b2884.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/440" alt=""></p><h3 id="完全自定义"><a href="#完全自定义" class="headerlink" title="完全自定义"></a>完全自定义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Toast toast=Toast.makeText(this, &quot;完全不一样&quot;, Toast.LENGTH_LONG);</div><div class="line">toast.setGravity(Gravity.CENTER,0,0);</div><div class="line"></div><div class="line">View v= getLayoutInflater().inflate(R.layout.toast,null);</div><div class="line">toast.setView(v);</div><div class="line">toast.show();</div></pre></td></tr></table></figure><p>toast.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">              android:orientation=&quot;vertical&quot;</div><div class="line">              android:gravity=&quot;center&quot;</div><div class="line">              android:layout_width=&quot;match_parent&quot;</div><div class="line">              android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:background=&quot;@drawable/bg_toast&quot;&gt;</div><div class="line">    &lt;ImageView</div><div class="line">        android:id=&quot;@+id/iv_icon&quot;</div><div class="line">        android:layout_width=&quot;@dimen/toast_icon_size&quot;</div><div class="line">        android:layout_height=&quot;@dimen/toast_icon_size&quot;</div><div class="line">        android:src=&quot;@drawable/ic_info&quot;/&gt;</div><div class="line">    &lt;TextView</div><div class="line">        android:id=&quot;@+id/tv&quot;</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:textColor=&quot;@color/toast_text&quot;</div><div class="line">        android:maxEms=&quot;12&quot;</div><div class="line">        android:layout_marginTop=&quot;@dimen/s_small_spacing&quot;</div><div class="line">        android:textSize=&quot;@dimen/sub_medium_text&quot;/&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p><p>效果就是开头动图里面前四种</p><h2 id="同样式的loading"><a href="#同样式的loading" class="headerlink" title="同样式的loading"></a>同样式的loading</h2><p>loading框的话显示时间不固定，不能用toast来实现，应为它只能显示1.5s或3s，那就用dialog来实现它，这里有一点要注意，就是背景如何做到半透明，并且大小合适<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">View view=LayoutInflater.from(context).inflate</div><div class="line">                (R.layout.toast_loading,null);</div><div class="line">TextView tv=view.findViewById(R.id.tv);</div><div class="line">tv.setText(text);</div><div class="line">AVLoadingIndicatorView avl=view.findViewById(R.id.avl);</div><div class="line">avl.setIndicator(getIndicator(context));</div><div class="line">avl.show();</div><div class="line"></div><div class="line">dialog=new AlertDialog.Builder(context)</div><div class="line">            .setView(view)</div><div class="line">            .setCancelable(false)</div><div class="line">            .create();</div><div class="line">dialog.show();</div></pre></td></tr></table></figure></p><p><em>AVLoadingIndicatorView 是一个loadingView的开源库，有多种样式，这里随机获取一种<a href="https://github.com/81813780/AVLoadingIndicatorView" target="_blank" rel="external">https://github.com/81813780/AVLoadingIndicatorView</a></em></p><p>toast_loading.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">              xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class="line">              android:orientation=&quot;vertical&quot;</div><div class="line">              android:gravity=&quot;center&quot;</div><div class="line">              android:layout_width=&quot;match_parent&quot;</div><div class="line">              android:layout_height=&quot;match_parent&quot;</div><div class="line">              android:background=&quot;@drawable/bg_toast_loading&quot;&gt;</div><div class="line">    &lt;com.wang.avi.AVLoadingIndicatorView</div><div class="line">        android:id=&quot;@+id/avl&quot;</div><div class="line">        app:indicatorColor=&quot;@color/toast_text&quot;</div><div class="line">        app:indicatorName=&quot;LineScaleIndicator&quot;</div><div class="line">        android:layout_width=&quot;@dimen/toast_icon_size&quot;</div><div class="line">        android:layout_height=&quot;@dimen/toast_icon_size&quot;/&gt;</div><div class="line">    &lt;TextView</div><div class="line">        android:id=&quot;@+id/tv&quot;</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:textColor=&quot;@color/toast_text&quot;</div><div class="line">        android:maxEms=&quot;12&quot;</div><div class="line">        android:layout_marginTop=&quot;@dimen/s_small_spacing&quot;</div><div class="line">        android:textSize=&quot;@dimen/sub_medium_text&quot;/&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p><p>然而出来的效果</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-d3cd6f91a32c86cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/440" alt=""></p><p>这这效果。。。背景还是纯白，宽度不是wrap_content。这里需要自己写个dialog的theme，如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;style name=&quot;CustomDialog&quot; parent=&quot;android:Theme.Dialog&quot;&gt;</div><div class="line">        &lt;item name=&quot;android:windowIsTranslucent&quot;&gt;true&lt;/item&gt;</div><div class="line">        &lt;item name=&quot;android:windowBackground&quot;&gt;@android:color/transparent&lt;/item&gt;</div><div class="line">    &lt;/style&gt;</div></pre></td></tr></table></figure></p><p>然后在创建AlertDialog.Builder时传进去<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dialog=new AlertDialog.Builder(context,R.style.CustomDialog)</div><div class="line">                .setView(view)</div><div class="line">...</div></pre></td></tr></table></figure></p><p>再看效果</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-60cb818e1ce8d424.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/440" alt=""></p><p>封装类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div></pre></td><td class="code"><pre><div class="line">import android.content.Context;</div><div class="line">import android.support.v7.app.AlertDialog;</div><div class="line">import android.view.Gravity;</div><div class="line">import android.view.LayoutInflater;</div><div class="line">import android.view.View;</div><div class="line">import android.widget.ImageView;</div><div class="line">import android.widget.TextView;</div><div class="line">import android.widget.Toast;</div><div class="line"></div><div class="line">import com.example.myframe.R;</div><div class="line">import com.wang.avi.AVLoadingIndicatorView;</div><div class="line"></div><div class="line">import java.util.Random;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Author：LvQingYang</div><div class="line"> * Date：2017/8/18</div><div class="line"> * Email：biloba12345@gamil.com</div><div class="line"> * Github：https://github.com/biloba123</div><div class="line"> *Blog：https://biloba123.github.io/</div><div class="line"> * Info：</div><div class="line"> */</div><div class="line">public class MyToast &#123;</div><div class="line">    private static Toast toast;</div><div class="line">    private static AlertDialog dialog;</div><div class="line">    //info toast</div><div class="line">    public static void info(Context context ,String text, int duration)&#123;</div><div class="line">        showToast(context, R.drawable.ic_info, text, duration);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void info(Context context ,int textId, int duration)&#123;</div><div class="line">        showToast(context, R.drawable.ic_info,context.getString(textId),duration);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void info(Context context ,String text)&#123;</div><div class="line">        showToast(context, R.drawable.ic_info, text, Toast.LENGTH_SHORT);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void info(Context context ,int textId)&#123;</div><div class="line">        showToast(context, R.drawable.ic_info,context.getString(textId),Toast.LENGTH_SHORT);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //success</div><div class="line">    public static void success(Context context ,String text, int duration)&#123;</div><div class="line">        showToast(context, R.drawable.ic_success, text, duration);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void success(Context context ,int textId, int duration)&#123;</div><div class="line">        showToast(context, R.drawable.ic_success, context.getString(textId),duration);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void success(Context context ,String text)&#123;</div><div class="line">        showToast(context, R.drawable.ic_success, text, Toast.LENGTH_SHORT);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void success(Context context ,int textId)&#123;</div><div class="line">        showToast(context, R.drawable.ic_success, context.getString(textId),Toast.LENGTH_SHORT);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //error</div><div class="line">    public static void error(Context context ,String text, int duration)&#123;</div><div class="line">        showToast(context, R.drawable.ic_error, text, duration);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void error(Context context ,int textId, int duration)&#123;</div><div class="line">        showToast(context, R.drawable.ic_error, context.getString(textId),duration);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void error(Context context ,String text)&#123;</div><div class="line">        showToast(context, R.drawable.ic_error, text, Toast.LENGTH_SHORT);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void error(Context context ,int textId)&#123;</div><div class="line">        showToast(context, R.drawable.ic_error, context.getString(textId),Toast.LENGTH_SHORT);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //loading</div><div class="line">    public static void loading(Context context ,String text)&#123;</div><div class="line">        View view=LayoutInflater.from(context).inflate</div><div class="line">                (R.layout.toast_loading,null);</div><div class="line">        TextView tv=view.findViewById(R.id.tv);</div><div class="line">        tv.setText(text);</div><div class="line">        AVLoadingIndicatorView avl=view.findViewById(R.id.avl);</div><div class="line">        avl.setIndicator(getIndicator(context));</div><div class="line">        avl.show();</div><div class="line"></div><div class="line">        dialog=new AlertDialog.Builder(context,R.style.CustomDialog)</div><div class="line">                .setView(view)</div><div class="line">                .setCancelable(false)</div><div class="line">                .create();</div><div class="line">        dialog.show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    public static void loading(Context context ,int textId)&#123;</div><div class="line">        loading(context, context.getString(textId));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //warning</div><div class="line">    public static void warning(Context context ,String text, int duration)&#123;</div><div class="line">        showToast(context, R.drawable.ic_warning, text, duration);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void warning(Context context ,int textId, int duration)&#123;</div><div class="line">        showToast(context, R.drawable.ic_warning, context.getString(textId),duration);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void warning(Context context ,String text)&#123;</div><div class="line">        showToast(context, R.drawable.ic_warning, text, Toast.LENGTH_SHORT);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void warning(Context context ,int textId)&#123;</div><div class="line">        showToast(context, R.drawable.ic_warning, context.getString(textId),Toast.LENGTH_SHORT);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void cancel()&#123;</div><div class="line">        if (toast != null) &#123;</div><div class="line">            toast.cancel();</div><div class="line">        &#125;</div><div class="line">        if (dialog != null) &#123;</div><div class="line">            dialog.cancel();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    static void showToast(Context context, int iconId, String text, int duration)&#123;</div><div class="line">        if (toast != null) &#123;</div><div class="line">            toast.cancel();</div><div class="line">        &#125;</div><div class="line">        toast=Toast.makeText(context, text, duration);</div><div class="line">        toast.setGravity(Gravity.CENTER,0,0);</div><div class="line"></div><div class="line">        View v= LayoutInflater.from(context).inflate</div><div class="line">                (R.layout.toast,null);</div><div class="line">        ImageView ivIcon=v.findViewById(R.id.iv_icon);</div><div class="line">        ivIcon.setImageResource(iconId);</div><div class="line">        TextView tv=v.findViewById(R.id.tv);</div><div class="line">        tv.setText(text);</div><div class="line"></div><div class="line">        toast.setView(v);</div><div class="line">        toast.show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private static String getIndicator(Context context)</div><div class="line">    &#123;</div><div class="line">        String[] arrayOfString = context.getResources().getStringArray(R.array.arr_indicator);</div><div class="line">        int i = new Random().nextInt(arrayOfString.length);</div><div class="line">        return arrayOfString[i];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/09/13/%E6%9D%A5%E4%B8%80%E5%A5%97%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84Toast--%E8%87%AA%E5%AE%9A%E4%B9%89Toast/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
