<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>吕晴阳在这瞎写</title>
    <link>http://yoursite.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>走过的人说树枝长了，走过的人说树枝在长</description>
    <pubDate>Sun, 22 Oct 2017 06:37:05 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Android Picture详解</title>
      <link>http://yoursite.com/2017/10/22/Android%20Picture%E8%AF%A6%E8%A7%A3/</link>
      <guid>http://yoursite.com/2017/10/22/Android%20Picture%E8%AF%A6%E8%A7%A3/</guid>
      <pubDate>Sun, 22 Oct 2017 06:35:45 GMT</pubDate>
      <description>
      
        &lt;p&gt;Picture是自定义view中一个实用的工具，对应Canvas中的drawPicture方法，当然除了这个外还有另外两个方法用于绘制Picture：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Picture自身的draw(Canvas canvas)&lt;/li&gt;
&lt;li&gt;PictureDrawable的draw(Canvas canvas)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面会讨论三种方式的不同之处，首先来看下Picture的用途和主要方法&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Picture是自定义view中一个实用的工具，对应Canvas中的drawPicture方法，当然除了这个外还有另外两个方法用于绘制Picture：</p><ul><li>Picture自身的draw(Canvas canvas)</li><li>PictureDrawable的draw(Canvas canvas)</li></ul><p>下面会讨论三种方式的不同之处，首先来看下Picture的用途和主要方法</p><a id="more"></a><h2 id="Picture简介"><a href="#Picture简介" class="headerlink" title="Picture简介"></a>Picture简介</h2><p>Picture是用来干嘛的呢？官方参考是这样介绍的</p><blockquote><p>A Picture records drawing calls (via the canvas returned by beginRecording) and can then play them back into Canvas (via draw(Canvas) or drawPicture(Picture)). For most content (e.g. text, lines, rectangles), drawing a sequence from a picture can be faster than the equivalent API calls, since the picture performs its playback without incurring any method-call overhead.</p></blockquote><p>也就是说当调用Picture的beginRecording的方法后，会返回一个Canvas，在这上面绘制的各种内容会被录制下来，之后需要的时候，直接绘制Picture会比在绘制一遍各种内容快一些。通常当有些内容我们需要绘制多次时，可以先用它录制下来，之后直接把录制的Picture绘制出来就可以了</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>Picture()</td><td>构造方法</td></tr><tr><td>Picture(Picture src)</td><td>构造方法，在已有Picture基础上再进行录制</td></tr><tr><td>public Canvas beginRecording (int width, int height)</td><td>开始录制，在返回的Canvas上进行绘制</td></tr><tr><td>public void endRecording ()</td><td>结束录制</td></tr><tr><td>public void draw (Canvas canvas)</td><td>将Picture绘制到Canvas上</td></tr><tr><td>public int getWidth ()</td><td>获取宽度</td></tr><tr><td>public int getHeight ()</td><td>获取高度</td></tr></tbody></table><p>还有两个createFromStream、writeToStream在API 18已经被弃用。上面方法理解起来也容易，beginRecording和endRecording对应，开始和结束录制，在它们两个间进行绘制操作</p><h2 id="三种不同绘制方法的使用和区别"><a href="#三种不同绘制方法的使用和区别" class="headerlink" title="三种不同绘制方法的使用和区别"></a>三种不同绘制方法的使用和区别</h2><p>录制的内容不会直接显示，只是存储起来，想要将Picture中的内容显示出来就需要手动调用=绘制方法，有3种方法：</p><ol><li>使用Picture提供的draw方法绘制</li><li>使用Canvas提供的drawPicture方法绘制</li><li>将Picture包装成为PictureDrawable，使用PictureDrawable的draw方法绘制</li></ol><p>下面来分别看看三种方法的使用。</p><h3 id="Picture的draw方法"><a href="#Picture的draw方法" class="headerlink" title="Picture的draw方法"></a>Picture的draw方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">    private Picture mPicture=new Picture();</div><div class="line"></div><div class="line"></div><div class="line">    public CanvasView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        mPaint=new Paint();</div><div class="line">        mPaint.setStrokeWidth(24);</div><div class="line">        mPaint.setStyle(Paint.Style.FILL);</div><div class="line">        mPaint.setStrokeCap(Paint.Cap.ROUND);</div><div class="line"></div><div class="line">        recording();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        mPicture.draw(canvas);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void recording() &#123;</div><div class="line">        Canvas canvas=mPicture.beginRecording(400, 400);</div><div class="line">        canvas.drawPoint(0, 0, mPaint);</div><div class="line">        mPaint.setColor(Color.RED);</div><div class="line">        canvas.drawPoint(250, 250, mPaint);</div><div class="line">        mPaint.setColor(Color.BLUE);</div><div class="line">        canvas.drawPoint(500, 500, mPaint);</div><div class="line"></div><div class="line">        mPicture.endRecording();</div><div class="line">    &#125;</div><div class="line">...</div></pre></td></tr></table></figure><p>我们分别绘制三个点(0, 0)、(250, 250)、(500, 500)，但是传入的宽高是400，那第三个点会怎样呢</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-277ca7d7f7346dc1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>可以看到三个点都绘制出来了，说明传入的宽和高并不是限定画布绘制的范围，而是其相对大小（等下再具体解释），而且绘制时是将Picture的左上角和Canvas坐标轴对齐绘制<br>例如，将canvas坐标轴移到中心<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        canvas.translate(getWidth()/2f, getHeight()/2f);</div><div class="line">        mPicture.draw(canvas);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-95816c004477db6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>从上面得出，Picture的draw方法是将Picture不做任何变化原样绘制到画布上</p><h3 id="Canvas的drawPicture方法"><a href="#Canvas的drawPicture方法" class="headerlink" title="Canvas的drawPicture方法"></a>Canvas的drawPicture方法</h3><p>这个方法有三种重载，一个参数的drawPicture(Picture picture)和Picture的draw方法效果相同，还有两个重载是通过RectF和Rect对Picture绘制进行一些控制<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        canvas.drawPicture(mPicture, new RectF(0, 200, mPicture.getWidth(), 200+mPicture.getHeight()));</div><div class="line">        canvas.drawPicture(mPicture, new RectF(0, 0,mPicture.getWidth(), mPicture.getHeight()/2));</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-b9b088a231758687.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>可以看到第一次绘制的形状未变，只不过在y轴上上移了200px，第二次将高减为一般半，绘制出的Picture在y轴方向压缩了一半，也就是rect并不是对图形进行裁剪，而是缩小或放大，和Picture本身的width和height相对应。看源码更清楚：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">     * Draw the picture, stretched to fit into the dst rectangle.</div><div class="line">     */</div><div class="line">    public void drawPicture(@NonNull Picture picture, @NonNull RectF dst) &#123;</div><div class="line">        save();</div><div class="line">        translate(dst.left, dst.top);</div><div class="line">        if (picture.getWidth() &gt; 0 &amp;&amp; picture.getHeight() &gt; 0) &#123;</div><div class="line">            scale(dst.width() / picture.getWidth(), dst.height() / picture.getHeight());</div><div class="line">        &#125;</div><div class="line">        drawPicture(picture);</div><div class="line">        restore();</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><h3 id="PictureDrawable的draw方法"><a href="#PictureDrawable的draw方法" class="headerlink" title="PictureDrawable的draw方法"></a>PictureDrawable的draw方法</h3><p>要控制在画布上的绘制区域，就需要使用PictureDrawable，设置bound<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 包装成为PictureDrawable</div><div class="line">PictureDrawable drawable = new PictureDrawable(mPicture);</div><div class="line">// 设置绘制区域</div><div class="line">drawable.setBounds(0,0,250,mPicture.getHeight());</div><div class="line">// 绘制</div><div class="line">drawable.draw(canvas);</div></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-657cda9477915226.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>可以看到绘制区域被限定在(0, 0,250, 400)范围内，而不像上面对Picture进行缩放，这里注意是限定绘制区域，而不是对Picture进行裁剪</p><p>综上，</p><ul><li>一般并不使用Picture提供的draw方法，它在比较低版本的系统上绘制后可能会影响Canvas状态</li><li>如果想对绘制位置和比例进行控制用Canvas提供的drawPicture方法绘制</li><li>如果想设置绘制区域则使用PictureDrawable的draw方法</li></ul>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/10/22/Android%20Picture%E8%AF%A6%E8%A7%A3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>WiFi开发（一）--WiFi开关与状态监听</title>
      <link>http://yoursite.com/2017/10/22/WiFi%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89--WiFi%E5%BC%80%E5%85%B3%E4%B8%8E%E7%8A%B6%E6%80%81%E7%9B%91%E5%90%AC/</link>
      <guid>http://yoursite.com/2017/10/22/WiFi%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89--WiFi%E5%BC%80%E5%85%B3%E4%B8%8E%E7%8A%B6%E6%80%81%E7%9B%91%E5%90%AC/</guid>
      <pubDate>Sun, 22 Oct 2017 06:33:58 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;之前开发了一个WiFi，热点相关的应用。因为对这方面也不熟悉，刚开始找资料看书，但看明白实现时，发现随着android版本更新，相关api有较大改动，之前的代码不能用。经过一番探索，最后实现出来了，现在把它记录下来，希望能给需要的人一些帮助。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先来讲WiFi开发相关，那第一步肯定是如何来控制WiFi打开关闭状态，以及如何来监听其状态变化。&lt;/p&gt;
&lt;h2 id=&quot;WiFi连接控制类–WiFiManager&quot;&gt;&lt;a href=&quot;#WiFi连接控制类–WiFiManager&quot; class=&quot;headerlink&quot; title=&quot;WiFi连接控制类–WiFiManager&quot;&gt;&lt;/a&gt;WiFi连接控制类–WiFiManager&lt;/h2&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>之前开发了一个WiFi，热点相关的应用。因为对这方面也不熟悉，刚开始找资料看书，但看明白实现时，发现随着android版本更新，相关api有较大改动，之前的代码不能用。经过一番探索，最后实现出来了，现在把它记录下来，希望能给需要的人一些帮助。</p></blockquote><p>首先来讲WiFi开发相关，那第一步肯定是如何来控制WiFi打开关闭状态，以及如何来监听其状态变化。</p><h2 id="WiFi连接控制类–WiFiManager"><a href="#WiFi连接控制类–WiFiManager" class="headerlink" title="WiFi连接控制类–WiFiManager"></a>WiFi连接控制类–WiFiManager</h2><a id="more"></a><p><img src="http://upload-images.jianshu.io/upload_images/5734256-4ef9dcec5c229bbf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>从官网参考可以知道它以下几个作用：</p><ol><li>获取配置好的网络，也就是之前连接过的WiFi；</li><li>对当前活动的WiFi网络建立新连接或断开，可以查询有关网络状态；</li><li>周围扫描到的接入点，对应类为ScanResult；</li><li>定义了在Wi-Fi状态改变后发出广播的intent action。</li></ol><p>可以看出主要是用它来控制监听WiFi状态</p><h2 id="打开关闭WiFi"><a href="#打开关闭WiFi" class="headerlink" title="打开关闭WiFi"></a>打开关闭WiFi</h2><p>对WiFi进行控制要声明相关权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot;/&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.CHANGE_WIFI_STATE&quot;/&gt;</div></pre></td></tr></table></figure></p><p>接着获取WifiManager<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mWifiManager= (WifiManager) getApplicationContext()</div><div class="line">                .getSystemService(Context.WIFI_SERVICE);</div></pre></td></tr></table></figure></p><p>注意这里必须使用Application的上下文，那在fragment中获取的话通过getActivity().getApplicationContext()，因为碎片中无法直接获取Application Context</p><p>获取到WifiManager后就可以通过isWifiEnabled()判断是否打开，setWifiEnabled(boolean enabled)打开或关闭wifi，它的返回值说明操作结果，可能操作失败<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//set wifi switch state</div><div class="line">        swwifi.setChecked(mWifiManager.isWifiEnabled());</div><div class="line"></div><div class="line">        swwifi.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) &#123;</div><div class="line">                mWifiManager.setWifiEnabled(isChecked);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p><p>这里简单的通过个switch显示和控制开关状态</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-696d71cb43378bf5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/440" alt=""></p><h2 id="WiFi状态监听"><a href="#WiFi状态监听" class="headerlink" title="WiFi状态监听"></a>WiFi状态监听</h2><p>上面只是能在应用中控制wifi开关，但如果在外面wifi发生变化，应用内没监听的话，那相关显示就错误了</p><p>监听是通过WifiManager定义的一些action动态注册广播监听（只能动态注册）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">//注册接收器</div><div class="line">    private void registerBroadcast() &#123;</div><div class="line">        IntentFilter filter = new IntentFilter();</div><div class="line">        filter.addAction(WifiManager.WIFI_STATE_CHANGED_ACTION);</div><div class="line">        registerReceiver(new BroadcastReceiver() &#123;</div><div class="line">            @Override</div><div class="line">            public void onReceive(Context context, Intent intent) &#123;</div><div class="line">                if (intent.getAction()== WifiManager.WIFI_STATE_CHANGED_ACTION) &#123;</div><div class="line">                    switch (intent.getIntExtra(WifiManager.EXTRA_WIFI_STATE, WIFI_STATE_UNKNOWN)) &#123;</div><div class="line">                        case WIFI_STATE_DISABLED:&#123;</div><div class="line">                            Toast.makeText(context, &quot;WiFi disabled&quot;, Toast.LENGTH_SHORT).show();</div><div class="line">                            swwifi.setChecked(false);</div><div class="line">                            break;</div><div class="line">                        &#125;</div><div class="line">                        case WIFI_STATE_DISABLING:&#123;</div><div class="line">                            Toast.makeText(context, &quot;WiFi disabling&quot;, Toast.LENGTH_SHORT).show();</div><div class="line">                            break;</div><div class="line">                        &#125;</div><div class="line">                        case WIFI_STATE_ENABLED :&#123;</div><div class="line">                            Toast.makeText(context, &quot;WiFi enabled&quot;, Toast.LENGTH_SHORT).show();</div><div class="line">                            swwifi.setChecked(true);</div><div class="line">                            break;</div><div class="line">                        &#125;</div><div class="line">                        case WIFI_STATE_ENABLING:&#123;</div><div class="line">                            Toast.makeText(context, &quot;WiFi enabling&quot;, Toast.LENGTH_SHORT).show();</div><div class="line">                            break;</div><div class="line">                        &#125;</div><div class="line">                        case WIFI_STATE_UNKNOWN:&#123;</div><div class="line">                            Toast.makeText(context, &quot;WiFi state unknown&quot;, Toast.LENGTH_SHORT).show();</div><div class="line">                            break;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;, filter);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>其他一些状态也基本是通过动态注册广播监听</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-4d10aed03ea56643.gif?imageMogr2/auto-orient/strip" alt=""></p><p>上面有一点，刚打开注册广播时立即收到一条当前状态的广播</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/10/22/WiFi%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89--WiFi%E5%BC%80%E5%85%B3%E4%B8%8E%E7%8A%B6%E6%80%81%E7%9B%91%E5%90%AC/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Android获取调试版及发布版安全码SHA1</title>
      <link>http://yoursite.com/2017/10/13/Android%E8%8E%B7%E5%8F%96%E8%B0%83%E8%AF%95%E7%89%88%E5%8F%8A%E5%8F%91%E5%B8%83%E7%89%88%E5%AE%89%E5%85%A8%E7%A0%81SHA1/</link>
      <guid>http://yoursite.com/2017/10/13/Android%E8%8E%B7%E5%8F%96%E8%B0%83%E8%AF%95%E7%89%88%E5%8F%8A%E5%8F%91%E5%B8%83%E7%89%88%E5%AE%89%E5%85%A8%E7%A0%81SHA1/</guid>
      <pubDate>Fri, 13 Oct 2017 12:20:43 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;签名文件&quot;&gt;&lt;a href=&quot;#签名文件&quot; class=&quot;headerlink&quot; title=&quot;签名文件&quot;&gt;&lt;/a&gt;签名文件&lt;/h2&gt;&lt;p&gt;签名文件keystore一般有两种：jks后缀或者keystore后缀，Android Studio中创建的为jks后缀，keytool创建的为keystore后缀，两种文件均可用于APP打包。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;开发版SHA1：&lt;/strong&gt;是指在开发调试时，从Android Studio或者Eclipse中直接运行的APP在打包时使用了开发工具默认的开发版（debug）签名文件，开发版签名文件对应有唯一的SHA1。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;发布版SHA1：&lt;/strong&gt;是指在提交测试或发布时，APP签名打包过程中选择的指定签名文件，一般此签名文件为开发者或者开发团队持有，与具体的开发工具无关，发布版签名文件同样也对应有唯一的SHA1。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="签名文件"><a href="#签名文件" class="headerlink" title="签名文件"></a>签名文件</h2><p>签名文件keystore一般有两种：jks后缀或者keystore后缀，Android Studio中创建的为jks后缀，keytool创建的为keystore后缀，两种文件均可用于APP打包。</p><p><strong>开发版SHA1：</strong>是指在开发调试时，从Android Studio或者Eclipse中直接运行的APP在打包时使用了开发工具默认的开发版（debug）签名文件，开发版签名文件对应有唯一的SHA1。</p><p><strong>发布版SHA1：</strong>是指在提交测试或发布时，APP签名打包过程中选择的指定签名文件，一般此签名文件为开发者或者开发团队持有，与具体的开发工具无关，发布版签名文件同样也对应有唯一的SHA1。</p><a id="more"></a><h2 id="Android获取SHA1"><a href="#Android获取SHA1" class="headerlink" title="Android获取SHA1"></a>Android获取SHA1</h2><p>在AndroidStudio中的Terminal中使用keytool命令获取。</p><h3 id="发布版SHA1"><a href="#发布版SHA1" class="headerlink" title="发布版SHA1"></a>发布版SHA1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keytool -exportcert -list -v -alias &lt;your-key-name&gt; -keystore &lt;path-to-production-keystore&gt;</div></pre></td></tr></table></figure><p><strong><your-key-name>：</your-key-name></strong>发布版签名文件中key的别名（非必需，如果在创建时没设别名可以去掉-alias <your-key-name>）<br><strong><path-to-production-keystore>：</path-to-production-keystore></strong>替换为自己发布版签名文件的完整路径</your-key-name></p><p>例如：<br>keystore放在 C:\android_projects\biloba.jks<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keytool -exportcert -list -v -keystore C:\android_projects\biloba.jks</div></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-5a13ca3fd7b716bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>若为keystore类型的文件只用把后缀名换一下。</p><h3 id="调试版SHA1"><a href="#调试版SHA1" class="headerlink" title="调试版SHA1"></a>调试版SHA1</h3><p>调试版keystore默认在 C:\User.android\debug.keystore（Windows下），<br>若为Mac和Linux，此路径应该为~/.android/debug.keystore<br><strong>keystore的密码默认为android</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-a6d06b1baa4e2462.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>命令和上面一样，只不过把路径换成默认签名文件所在路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keytool -exportcert -list -v -keystore C:\Users\23738\.android\debug.keystore</div></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-e0d112f97fbb00d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/10/13/Android%E8%8E%B7%E5%8F%96%E8%B0%83%E8%AF%95%E7%89%88%E5%8F%8A%E5%8F%91%E5%B8%83%E7%89%88%E5%AE%89%E5%85%A8%E7%A0%81SHA1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Android平台MQTT使用并实现简单聊天室</title>
      <link>http://yoursite.com/2017/10/11/Android%E5%B9%B3%E5%8F%B0MQTT%E4%BD%BF%E7%94%A8%E5%B9%B6%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E8%81%8A%E5%A4%A9%E5%AE%A4/</link>
      <guid>http://yoursite.com/2017/10/11/Android%E5%B9%B3%E5%8F%B0MQTT%E4%BD%BF%E7%94%A8%E5%B9%B6%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E8%81%8A%E5%A4%A9%E5%AE%A4/</guid>
      <pubDate>Wed, 11 Oct 2017 14:08:37 GMT</pubDate>
      <description>
      
        &lt;p&gt;在上一篇文章介绍了MQTT的原理以及其在NodeMCU上运用实现一些简单的物联网&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/701f4d31029f&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/701f4d31029f&lt;/a&gt;&lt;br&gt;但没讲Android APP怎么实现的，那这篇将介绍MQTT协议在Android平台的运用，除了可以用来控制智能硬件，还常实现消息推送和即时通讯im。下面的例子用它来实现一个简单的聊天室&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>在上一篇文章介绍了MQTT的原理以及其在NodeMCU上运用实现一些简单的物联网<br><a href="http://www.jianshu.com/p/701f4d31029f" target="_blank" rel="external">http://www.jianshu.com/p/701f4d31029f</a><br>但没讲Android APP怎么实现的，那这篇将介绍MQTT协议在Android平台的运用，除了可以用来控制智能硬件，还常实现消息推送和即时通讯im。下面的例子用它来实现一个简单的聊天室<br><a id="more"></a></p><h3 id="Android中使用MQTT协议"><a href="#Android中使用MQTT协议" class="headerlink" title="Android中使用MQTT协议"></a>Android中使用MQTT协议</h3><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><p>在gradle中添加依赖，引入相应的库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">  ...</div><div class="line">  compile &apos;commons-codec:commons-codec:1.5&apos;</div><div class="line">  compile &apos;org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.0.2&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="权限声明"><a href="#权限声明" class="headerlink" title="权限声明"></a>权限声明</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.WAKE_LOCK&quot;/&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot;/&gt;</div></pre></td></tr></table></figure><p>这些权限不是危险权限，不用运行时申请</p><h4 id="MQTT支持类"><a href="#MQTT支持类" class="headerlink" title="MQTT支持类"></a>MQTT支持类</h4><p>MqttAsyncClient是mqtt支持类，创建时要要传入服务器host，port以及设备标识clientID（不同设备id不能相同）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">MqttAsyncClient mqttClient=new MqttAsyncClient(&quot;tcp://&quot;+this.host+&quot;:&quot;+this.port ,</div><div class="line">                    &quot;ClientID&quot;+this.clientID, new MemoryPersistence());</div></pre></td></tr></table></figure></p><p>接着连接服务器，并对连接状态进行监听<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//注意接口回调都是在非主线程，不能直接进行ui操作</div><div class="line">mqttClient.connect(getOptions(), null, new IMqttActionListener() &#123;</div><div class="line">        @Override</div><div class="line">        public void onSuccess(IMqttToken asyncActionToken) &#123;</div><div class="line">            //连接成功</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onFailure(IMqttToken asyncActionToken, Throwable exception) &#123;</div><div class="line">            //连接失败</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure></p><p>getOptions()方法是对连接信息进行配置，如用户名，密码（一般服务器内不设）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">     * 设置Mqtt的连接信息</div><div class="line">     */</div><div class="line">    private MqttConnectOptions getOptions()&#123;</div><div class="line">        MqttConnectOptions options = new MqttConnectOptions();</div><div class="line">        options.setCleanSession(true);//重连不保持状态</div><div class="line">        if(this.userID!=null &amp;&amp; this.userID.length()&gt;0 &amp;&amp; this.passWord!=null &amp;&amp; this.passWord.length()&gt;0)&#123;</div><div class="line">            options.setUserName(this.userID);//设置服务器账号密码</div><div class="line">            options.setPassword(this.passWord.toCharArray());</div><div class="line">        &#125;</div><div class="line">        options.setConnectionTimeout(10);//设置连接超时时间</div><div class="line">        options.setKeepAliveInterval(30);//设置保持活动时间，超过时间没有消息收发将会触发ping消息确认</div><div class="line">        return options;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>最后对消息及连接进行监听<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">//注意接口回调都是在非主线程，不能直接进行ui操作</div><div class="line">mqttClient.setCallback(new MqttCallback() &#123;</div><div class="line">                @Override</div><div class="line">                public void connectionLost(Throwable cause) &#123;</div><div class="line">                    //丢失连接</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                @Override</div><div class="line">                public void messageArrived(String topic, MqttMessage message) throws Exception &#123;</div><div class="line">                    //接到推送消息</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                @Override</div><div class="line">                public void deliveryComplete(IMqttDeliveryToken token) &#123;</div><div class="line">                    //发送消息成功到达</div><div class="line">                &#125;</div><div class="line">            &#125;);</div></pre></td></tr></table></figure></p><p>获取并配置好MqttAsyncClient 后就可以调用相应方法订阅Topic接收消息<br>subscribe(String topicFilter, int qos)<br>发送某个Topic的消息<br>publish(String topic, byte[] payload, int qos, boolean retained)</p><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p>为了方便使用，对相关操作进行封装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Author：LvQingYang</div><div class="line"> * Date：2017/8/29</div><div class="line"> * Email：biloba12345@gamil.com</div><div class="line"> * Github：https://github.com/biloba123</div><div class="line"> * Info：MQTT操作类</div><div class="line"> */</div><div class="line"></div><div class="line">public class MyMqtt &#123;</div><div class="line">    private String TAG = &quot;MyMqtt&quot;;</div><div class="line"></div><div class="line">    /**MQTT配置参数**/</div><div class="line">    private static String host = &quot;****************&quot;;</div><div class="line">    private static String port = &quot;*****&quot;;</div><div class="line">    private static String userID = &quot;&quot;;</div><div class="line">    private static String passWord = &quot;&quot;;</div><div class="line">    private static String clientID =  UUID.randomUUID().toString();</div><div class="line"></div><div class="line"></div><div class="line">    /**MQTT状态信息**/</div><div class="line">    private boolean isConnect = false;</div><div class="line"></div><div class="line">    /**MQTT支持类**/</div><div class="line">    private MqttAsyncClient mqttClient=null;</div><div class="line"></div><div class="line">    private MqttListener mMqttListener;</div><div class="line"></div><div class="line">    private Handler mHandler=new Handler(new Handler.Callback() &#123;</div><div class="line">        @Override</div><div class="line">        public boolean handleMessage(Message message) &#123;</div><div class="line">            switch (message.arg1) &#123;</div><div class="line">                case MqttTag.MQTT_STATE_CONNECTED:</div><div class="line">                    if (BuildConfig.DEBUG) Log.d(TAG, &quot;handleMessage: connected&quot;);</div><div class="line">                    mMqttListener.onConnected();</div><div class="line">                    break;</div><div class="line">                case MqttTag.MQTT_STATE_FAIL:</div><div class="line">                    if (BuildConfig.DEBUG) Log.d(TAG, &quot;handleMessage: fail&quot;);</div><div class="line">                    mMqttListener.onFail();</div><div class="line">                    break;</div><div class="line">                case MqttTag.MQTT_STATE_LOST:</div><div class="line">                    if (BuildConfig.DEBUG) Log.d(TAG, &quot;handleMessage: lost&quot;);</div><div class="line">                    mMqttListener.onLost();</div><div class="line">                    break;</div><div class="line">                case MqttTag.MQTT_STATE_RECEIVE:</div><div class="line">                    if (BuildConfig.DEBUG) Log.d(TAG, &quot;handleMessage: receive&quot;);</div><div class="line">                    mMqttListener.onReceive((String) message.obj);</div><div class="line">                    break;</div><div class="line">                case MqttTag.MQTT_STATE_SEND_SUCC:</div><div class="line">                    if (BuildConfig.DEBUG) Log.d(TAG, &quot;handleMessage: send&quot;);</div><div class="line">                    mMqttListener.onSendSucc();</div><div class="line">                    break;</div><div class="line">            &#125;</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 自带的监听类，判断Mqtt活动变化</div><div class="line">     */</div><div class="line">    private IMqttActionListener mIMqttActionListener=new IMqttActionListener() &#123;</div><div class="line">        @Override</div><div class="line">        public void onSuccess(IMqttToken asyncActionToken) &#123;</div><div class="line">            isConnect=true;</div><div class="line">            Message msg=new Message();</div><div class="line">            msg.arg1=MqttTag.MQTT_STATE_CONNECTED;</div><div class="line">            mHandler.sendMessage(msg);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onFailure(IMqttToken asyncActionToken, Throwable exception) &#123;</div><div class="line">            isConnect=false;</div><div class="line">            Message msg=new Message();</div><div class="line">            msg.arg1=MqttTag.MQTT_STATE_FAIL;</div><div class="line">            mHandler.sendMessage(msg);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 自带的监听回传类</div><div class="line">     */</div><div class="line">    private MqttCallback mMqttCallback=new MqttCallback() &#123;</div><div class="line">        @Override</div><div class="line">        public void connectionLost(Throwable cause) &#123;</div><div class="line">            isConnect=false;</div><div class="line">            Message msg=new Message();</div><div class="line">            msg.arg1=MqttTag.MQTT_STATE_LOST;</div><div class="line">            mHandler.sendMessage(msg);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void messageArrived(String topic, MqttMessage message) throws Exception &#123;</div><div class="line">            Message msg=new Message();</div><div class="line">            msg.arg1=MqttTag.MQTT_STATE_RECEIVE;</div><div class="line">            msg.obj=new String(message.getPayload());</div><div class="line">            mHandler.sendMessage(msg);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void deliveryComplete(IMqttDeliveryToken token) &#123;</div><div class="line">            Message msg=new Message();</div><div class="line">            msg.arg1=MqttTag.MQTT_STATE_SEND_SUCC;</div><div class="line">            mHandler.sendMessage(msg);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    public MyMqtt(MqttListener lis)&#123;</div><div class="line">        mMqttListener=lis;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void setMqttSetting(String host, String port, String userID, String passWord, String clientID)&#123;</div><div class="line">        MyMqtt.host = host;</div><div class="line">        MyMqtt.port = port;</div><div class="line">        MyMqtt.userID = userID;</div><div class="line">        MyMqtt.passWord = passWord;</div><div class="line">        MyMqtt.clientID = clientID;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 进行Mqtt连接</div><div class="line">     */</div><div class="line">    public void connectMqtt()&#123;</div><div class="line">        try &#123;</div><div class="line">            mqttClient=new MqttAsyncClient(&quot;tcp://&quot;+this.host+&quot;:&quot;+this.port ,</div><div class="line">                    &quot;ClientID&quot;+this.clientID, new MemoryPersistence());</div><div class="line">            mqttClient.connect(getOptions(), null, mIMqttActionListener);</div><div class="line">            mqttClient.setCallback(mMqttCallback);</div><div class="line">        &#125; catch (MqttException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 断开Mqtt连接重新连接</div><div class="line">     */</div><div class="line">    public void reStartMqtt()&#123;</div><div class="line">        disConnectMqtt();</div><div class="line">        connectMqtt();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 断开Mqtt连接</div><div class="line">     */</div><div class="line">    public void disConnectMqtt()&#123;</div><div class="line">        try &#123;</div><div class="line">            mqttClient.disconnect();</div><div class="line">            mqttClient = null;</div><div class="line">            isConnect = false;</div><div class="line">        &#125; catch (MqttException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 向Mqtt服务器发送数据</div><div class="line">     */</div><div class="line">    public void pubMsg(String Topic, String Msg, int Qos)&#123;</div><div class="line">        if(!isConnect)&#123;</div><div class="line">            Log.d(TAG,&quot;Mqtt连接未打开&quot;);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        try &#123;</div><div class="line">            /** Topic,Msg,Qos,Retained**/</div><div class="line">            mqttClient.publish(Topic,Msg.getBytes(),Qos,false);</div><div class="line">        &#125; catch (MqttException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 向Mqtt服务器发送数据</div><div class="line">     */</div><div class="line">    public void pubMsg(String Topic, byte[] Msg, int Qos)&#123;</div><div class="line">        if(!isConnect)&#123;</div><div class="line">            Log.d(TAG,&quot;Mqtt连接未打开&quot;);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        try &#123;</div><div class="line">            /** Topic,Msg,Qos,Retained**/</div><div class="line">            mqttClient.publish(Topic,Msg,Qos,false);</div><div class="line">        &#125; catch (MqttException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 向Mqtt服务器订阅某一个Topic</div><div class="line">     */</div><div class="line">    public void subTopic(String Topic, int Qos)&#123;</div><div class="line">        if(!isConnect)&#123;</div><div class="line">            Log.d(TAG,&quot;Mqtt连接未打开&quot;);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        try &#123;</div><div class="line">            mqttClient.subscribe(Topic,Qos);</div><div class="line">        &#125; catch (MqttException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 设置Mqtt的连接信息</div><div class="line">     */</div><div class="line">    private MqttConnectOptions getOptions()&#123;</div><div class="line">        MqttConnectOptions options = new MqttConnectOptions();</div><div class="line">        options.setCleanSession(true);//重连不保持状态</div><div class="line">        if(this.userID!=null&amp;&amp;this.userID.length()&gt;0&amp;&amp;this.passWord!=null&amp;&amp;this.passWord.length()&gt;0)&#123;</div><div class="line">            options.setUserName(this.userID);//设置服务器账号密码</div><div class="line">            options.setPassword(this.passWord.toCharArray());</div><div class="line">        &#125;</div><div class="line">        options.setConnectionTimeout(10);//设置连接超时时间</div><div class="line">        options.setKeepAliveInterval(30);//设置保持活动时间，超过时间没有消息收发将会触发ping消息确认</div><div class="line">        return options;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public boolean isConnect() &#123;</div><div class="line">        return isConnect;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>相关标识MqttTag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class MqttTag &#123;</div><div class="line">    public final static int MQTT_STATE_CONNECTED=1;</div><div class="line">    public final static int MQTT_STATE_LOST=2;</div><div class="line">    public final static int MQTT_STATE_FAIL=3;</div><div class="line">    public final static int MQTT_STATE_RECEIVE=4;</div><div class="line">    public final static int MQTT_STATE_SEND_SUCC=5;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>接口MqttListener<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">interface MqttListener &#123;</div><div class="line">    void onConnected();//连接成功</div><div class="line">    void onFail();//连接失败</div><div class="line">    void onLost();//丢失连接</div><div class="line">    void onReceive(String message);//接收到消息</div><div class="line">    void onSendSucc();//消息发送成功</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>运用观察者模式，创建一个Service后台监听相关状态（写的不太规范…）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line">public class MqttService extends Service implements MqttListener &#123;</div><div class="line"></div><div class="line">    private static MyMqtt mMyMqtt;</div><div class="line">    private static List&lt;MqttListener&gt; mMqttListenerList=new ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    public static void start(Context context) &#123;</div><div class="line">        Intent starter = new Intent(context, MqttService.class);</div><div class="line">        context.startService(starter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void stop(Context context) &#123;</div><div class="line">        Intent starter = new Intent(context, MqttService.class);</div><div class="line">        context.stopService(starter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onCreate() &#123;</div><div class="line">        super.onCreate();</div><div class="line">        if (mMyMqtt==null) &#123;</div><div class="line">            mMyMqtt=new MyMqtt(this);</div><div class="line">        &#125;</div><div class="line">        mMyMqtt.connectMqtt();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    @Override</div><div class="line">    public IBinder onBind(Intent intent) &#123;</div><div class="line">        // TODO: Return the communication channel to the service.</div><div class="line">        throw new UnsupportedOperationException(&quot;Not yet implemented&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onDestroy() &#123;</div><div class="line">        super.onDestroy();</div><div class="line">        mMyMqtt.disConnectMqtt();</div><div class="line">        mMyMqtt=null;</div><div class="line">        mMqttListenerList.clear();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static MyMqtt getMyMqtt()&#123;</div><div class="line">        return mMyMqtt;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void addMqttListener(MqttListener listener)&#123;</div><div class="line">        if (!mMqttListenerList.contains(listener)) &#123;</div><div class="line">            mMqttListenerList.add(listener);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void removeMqttListener(MqttListener listener)&#123;</div><div class="line">        mMqttListenerList.remove(listener);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onConnected() &#123;</div><div class="line">        for (MqttListener mqttListener : mMqttListenerList) &#123;</div><div class="line">            mqttListener.onConnected();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onFail() &#123;</div><div class="line">        new Thread(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                mMyMqtt.connectMqtt();</div><div class="line">                try &#123;</div><div class="line">                    Thread.sleep(2000);</div><div class="line">                &#125; catch (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line">        for (MqttListener mqttListener : mMqttListenerList) &#123;</div><div class="line">            mqttListener.onFail();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onLost() &#123;</div><div class="line">        new Thread(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                mMyMqtt.connectMqtt();</div><div class="line">                try &#123;</div><div class="line">                    Thread.sleep(2000);</div><div class="line">                &#125; catch (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line">        for (MqttListener mqttListener : mMqttListenerList) &#123;</div><div class="line">            mqttListener.onLost();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onReceive(String message) &#123;</div><div class="line">        for (MqttListener mqttListener : mMqttListenerList) &#123;</div><div class="line">            mqttListener.onReceive(message);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onSendSucc() &#123;</div><div class="line">        for (MqttListener mqttListener : mMqttListenerList) &#123;</div><div class="line">            mqttListener.onSendSucc();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>简单的聊天室<br><img src="http://upload-images.jianshu.io/upload_images/5734256-eaed558875497582.gif?imageMogr2/auto-orient/strip" alt=""></p><p>源码<a href="https://github.com/biloba123/ChatRoom" target="_blank" rel="external">https://github.com/biloba123/ChatRoom</a><br>开源仓库里还有些其他mqtt示例</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/10/11/Android%E5%B9%B3%E5%8F%B0MQTT%E4%BD%BF%E7%94%A8%E5%B9%B6%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E8%81%8A%E5%A4%A9%E5%AE%A4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>FragmentTabHost的使用和注意事项</title>
      <link>http://yoursite.com/2017/10/07/FragmentTabHost%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <guid>http://yoursite.com/2017/10/07/FragmentTabHost%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <pubDate>Sat, 07 Oct 2017 07:43:25 GMT</pubDate>
      <description>
      
        &lt;p&gt;一般做tab式界面我都是用的BottomNavigationView+Fragment，自己代码控制各fragment的显示和隐藏，这样做代码要多些，如果控制不当可能会在用户重返app时出现fragment重合现象。那偷懒一些的做法可以使用FragmentTabHost+Fragment来实现，只用添加相应Tab就可以，方便很多。&lt;/p&gt;
&lt;p&gt;先看实现的效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/5734256-002e2490ff07d57a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>一般做tab式界面我都是用的BottomNavigationView+Fragment，自己代码控制各fragment的显示和隐藏，这样做代码要多些，如果控制不当可能会在用户重返app时出现fragment重合现象。那偷懒一些的做法可以使用FragmentTabHost+Fragment来实现，只用添加相应Tab就可以，方便很多。</p><p>先看实现的效果：</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-002e2490ff07d57a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><a id="more"></a><h3 id="布局文件"><a href="#布局文件" class="headerlink" title="布局文件"></a>布局文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;</div><div class="line">    tools:context=&quot;com.lvqingyang.mall.MainActivity&quot;&gt;</div><div class="line"></div><div class="line">    &lt;FrameLayout</div><div class="line">        android:id=&quot;@+id/container&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;0dp&quot;</div><div class="line">        android:layout_weight=&quot;1&quot;&gt;</div><div class="line">    &lt;/FrameLayout&gt;</div><div class="line"></div><div class="line">    &lt;!--分割线--&gt;</div><div class="line">    &lt;View</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;0.5dp&quot;</div><div class="line">        android:background=&quot;@color/div_darker&quot;/&gt;</div><div class="line"></div><div class="line">    &lt;android.support.v4.app.FragmentTabHost</div><div class="line">        android:id=&quot;@android:id/tabhost&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:background=&quot;@color/tab_bg&quot;&gt;</div><div class="line">        &lt;FrameLayout</div><div class="line">            android:id=&quot;@android:id/tabcontent&quot;</div><div class="line">            android:layout_width=&quot;0dp&quot;</div><div class="line">            android:layout_height=&quot;0dp&quot;&gt;</div><div class="line">        &lt;/FrameLayout&gt;</div><div class="line">    &lt;/android.support.v4.app.FragmentTabHost&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure><p>这里注意FragmentTabHost和它的孩子FrameLayout必须使用android内部id，虽然使用上面container的FrameLayout容纳fragment但FragmentTabHost内的FrameLayout也不能省</p><h3 id="代码中初始化"><a href="#代码中初始化" class="headerlink" title="代码中初始化"></a>代码中初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">private void initTab() &#123;</div><div class="line">        mTabs=new ArrayList&lt;&gt;();</div><div class="line">        mTabs.add(new Tab(R.string.home, R.drawable.selector_home, HomeFragment.class));</div><div class="line">        mTabs.add(new Tab(R.string.hot, R.drawable.selector_hot, HotFragment.class));</div><div class="line">        mTabs.add(new Tab(R.string.classes, R.drawable.selector_classes, ClassesFragment.class));</div><div class="line">        mTabs.add(new Tab(R.string.cart, R.drawable.selector_cart, CartFragment.class));</div><div class="line">        mTabs.add(new Tab(R.string.personal, R.drawable.selector_person, PersonalFragment.class));</div><div class="line"></div><div class="line">        //setup</div><div class="line">        tabhost.setup(this, getSupportFragmentManager(), R.id.container);</div><div class="line">        mLayoutInflater=getLayoutInflater();</div><div class="line"></div><div class="line">        for (Tab tab : mTabs) &#123;</div><div class="line">            tabhost.addTab(tabhost.newTabSpec(getString(tab.getTextId()))</div><div class="line">                    .setIndicator(buildIndicator(tab)), tab.getFragment(), null);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        //remove div</div><div class="line">        tabhost.getTabWidget().setDividerDrawable(null);</div><div class="line">        tabhost.setCurrentTab(0);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private View buildIndicator(Tab tab) &#123;</div><div class="line">        View view=mLayoutInflater.inflate(R.layout.indicator, null);</div><div class="line">        TextView tvtitle = (TextView) view.findViewById(R.id.tv_title);</div><div class="line">        ImageView ivicon = (ImageView) view.findViewById(R.id.iv_icon);</div><div class="line"></div><div class="line">        ivicon.setImageResource(tab.getImgId());</div><div class="line">        tvtitle.setText(tab.getTextId());</div><div class="line"></div><div class="line">        return view;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><ul><li>Tab是简单封装每个tab的信息，包括图标、文字、对应的fragment类。</li><li>接下来要调用FragmentTabHost的setup方法，传入FragmentManager和容纳fragment的FrameLayout的id，这样它才能管理这些碎片。</li><li>addTab时,第一个参数为TabSpec（传入的tag要唯一），并为它设置indicator。</li><li>tabhost默认会在每个tab中间显示分隔线，不想要的话用<br>tabhost.getTabWidget().setDividerDrawable(null); 去掉</li><li>最后默认在第一个位置</li></ul><h3 id="图标及文字的selector"><a href="#图标及文字的selector" class="headerlink" title="图标及文字的selector"></a>图标及文字的selector</h3><p>为了让tab选择和未选择下有不同效果，要使用到selector</p><p>icon的selector<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;selector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class="line"></div><div class="line">    &lt;item android:state_pressed=&quot;true&quot; android:drawable=&quot;@mipmap/home_fill&quot;/&gt;</div><div class="line">    &lt;item android:state_selected=&quot;true&quot; android:drawable=&quot;@mipmap/home_fill&quot;/&gt;</div><div class="line">    &lt;item android:drawable=&quot;@mipmap/home&quot;/&gt;</div><div class="line"></div><div class="line">&lt;/selector&gt;</div></pre></td></tr></table></figure></p><p>文字颜色的selector（注意要放在color目录下，作为color资源，直接指定给textColor属性）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;selector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class="line"></div><div class="line">    &lt;item android:state_pressed=&quot;true&quot; android:color=&quot;#e16531&quot;/&gt;</div><div class="line">    &lt;item android:state_selected=&quot;true&quot; android:color=&quot;#e16531&quot;/&gt;</div><div class="line">    &lt;item android:color=&quot;@color/sub_text_color&quot;/&gt;</div><div class="line"></div><div class="line">&lt;/selector&gt;</div></pre></td></tr></table></figure></p><h3 id="indicator布局"><a href="#indicator布局" class="headerlink" title="indicator布局"></a>indicator布局</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">              xmlns:tools=&quot;http://schemas.android.com/tools&quot;</div><div class="line">              android:orientation=&quot;vertical&quot;</div><div class="line">              android:gravity=&quot;center&quot;</div><div class="line">              android:paddingTop=&quot;@dimen/sub_small_spacing&quot;</div><div class="line">              android:layout_width=&quot;wrap_content&quot;</div><div class="line">              android:layout_height=&quot;wrap_content&quot;&gt;</div><div class="line">    &lt;ImageView</div><div class="line">        android:id=&quot;@+id/iv_icon&quot;</div><div class="line">        android:layout_width=&quot;@dimen/indicator_icon_size&quot;</div><div class="line">        android:layout_height=&quot;@dimen/indicator_icon_size&quot;</div><div class="line">        tools:src=&quot;@mipmap/home_fill&quot;/&gt;</div><div class="line">    &lt;TextView</div><div class="line">        android:id=&quot;@+id/tv_title&quot;</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:textSize=&quot;@dimen/sub_small_text&quot;</div><div class="line">        android:layout_marginTop=&quot;@dimen/s_small_spacing&quot;</div><div class="line">        android:layout_marginBottom=&quot;@dimen/s_small_spacing&quot;</div><div class="line">        android:textColor=&quot;@color/selector_text_color&quot;</div><div class="line">        tools:text=&quot;@string/app_name&quot;/&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure><h3 id="重用view"><a href="#重用view" class="headerlink" title="重用view"></a>重用view</h3><p>上面这些代码后就能实现想要的效果，但是会发现每次选中某个fragment都会重新调用它的onCreateView方法，也就是说view不能重用，这里可以在fragment中加入几行代码缓存view，避免每次都要重建view</p><p>BaseFragment.class<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">public abstract class BaseFragment extends Fragment&#123;</div><div class="line"></div><div class="line">    private View mView;//保存View</div><div class="line">    private static final String TAG = &quot;BaseFragment&quot;;</div><div class="line">    </div><div class="line">    @Nullable</div><div class="line">    @Override</div><div class="line">    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) &#123;</div><div class="line">        if (mView == null) &#123;//为空才inflater</div><div class="line">            mView=inflaterView(inflater, container, savedInstanceState);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ViewGroup parentView= (ViewGroup) mView.getParent();</div><div class="line">        if (parentView != null) &#123;//如果有parent则移除防止重复添加</div><div class="line">            parentView.removeView(mView);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        initView(mView);</div><div class="line">        setListener();</div><div class="line">        return mView;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) &#123;</div><div class="line">        super.onViewCreated(view, savedInstanceState);</div><div class="line"></div><div class="line">        initData();</div><div class="line">        setData();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected abstract View inflaterView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState);</div><div class="line"></div><div class="line">    protected abstract void initView(View view);</div><div class="line"></div><div class="line">    protected abstract void setListener();</div><div class="line"></div><div class="line">    protected abstract void initData();</div><div class="line"></div><div class="line">    protected abstract void setData();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/10/07/FragmentTabHost%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
