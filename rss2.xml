<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>吕晴阳在这瞎写</title>
    <link>http://yoursite.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>走过的人说树枝长了，走过的人说树枝在长</description>
    <pubDate>Thu, 14 Sep 2017 09:19:44 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>一步一步来，记全Git命令和用法</title>
      <link>http://yoursite.com/2017/09/14/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E6%9D%A5%EF%BC%8C%E8%AE%B0%E5%85%A8Git%E5%91%BD%E4%BB%A4%E5%92%8C%E7%94%A8%E6%B3%95/</link>
      <guid>http://yoursite.com/2017/09/14/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E6%9D%A5%EF%BC%8C%E8%AE%B0%E5%85%A8Git%E5%91%BD%E4%BB%A4%E5%92%8C%E7%94%A8%E6%B3%95/</guid>
      <pubDate>Thu, 14 Sep 2017 09:18:08 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Git基本配置&quot;&gt;&lt;a href=&quot;#Git基本配置&quot; class=&quot;headerlink&quot; title=&quot;Git基本配置&quot;&gt;&lt;/a&gt;Git基本配置&lt;/h2&gt;&lt;p&gt;Git配置使用git config分三种，存放在不同位置&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;/etc/gitconfig&lt;/td&gt;
&lt;td&gt;系统中对所有的用户都适用的配置。git config –system …&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;~/.gitconfig&lt;/td&gt;
&lt;td&gt;用户目录下的配置文件只适用该用户。git config –global …&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;当前项目下的.git/config&lt;/td&gt;
&lt;td&gt;配置只对当前项目有效。git config …&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Git基本配置"><a href="#Git基本配置" class="headerlink" title="Git基本配置"></a>Git基本配置</h2><p>Git配置使用git config分三种，存放在不同位置</p><table><thead><tr><th>文件</th><th>作用</th></tr></thead><tbody><tr><td>/etc/gitconfig</td><td>系统中对所有的用户都适用的配置。git config –system …</td></tr><tr><td>~/.gitconfig</td><td>用户目录下的配置文件只适用该用户。git config –global …</td></tr><tr><td>当前项目下的.git/config</td><td>配置只对当前项目有效。git config …</td></tr></tbody></table><a id="more"></a><p>首先要配置用户名和邮箱。每次git提交都会使用这里配置的默认信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name &quot;yourname&quot;</div><div class="line">git config --global user.email ...@example.com</div></pre></td></tr></table></figure></p><p>配置默认文本编辑器，例如emacs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global core.editor emacs</div></pre></td></tr></table></figure></p><p>配置解决差异冲突时使用哪种分析工具，例如vimdiff<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global merge.tool vimdiff</div></pre></td></tr></table></figure></p><p>检查已有配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --list</div></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-b4a893e15bc35ffe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>高亮显示一些配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git config --global color.status auto    #查看状态时高亮</div><div class="line">git config --global color.branch auto     #分支名高亮</div><div class="line">git config --global color.ui auto     #自动高亮</div></pre></td></tr></table></figure></p><p>配置别名来简化一些命令，例如checkout 简化为co，status简化为st<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global alias.co checkout</div><div class="line">git config --global alias.st status</div></pre></td></tr></table></figure></p><p>之后使用命令git checkout 时就可以简化为 git co</p><h2 id="Git基本命令"><a href="#Git基本命令" class="headerlink" title="Git基本命令"></a>Git基本命令</h2><p>环境配置好了后就可以使用了，常用的git命令就几个不用担心</p><h3 id="创建git仓库–git-inite"><a href="#创建git仓库–git-inite" class="headerlink" title="创建git仓库–git inite"></a>创建git仓库–git inite</h3><p>在项目根目录下执行git inite命令（在跟目录下右键Git Bash），会在根目录下创建隐藏.Git目录，包含相关配置和信息</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-9f18d0138b9cb20e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="查看本地仓库的状态–git-status"><a href="#查看本地仓库的状态–git-status" class="headerlink" title="查看本地仓库的状态–git status"></a>查看本地仓库的状态–git status</h3><p>使用git status或之前简化的git st，状态有三种已修改，已暂存，已修改。已修改是在工作目录也就是项目里修改还有提交保存；已暂存是指用git add命令提交到要保存的清单（暂存区域）；已提交是暂存区的文件通过git commit提交到本地git仓库；<br>由于我们新建的仓库，所有文件都没保存提交，都是已修改状态</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-4a5e89f9c28039df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="提交修改到暂存区域–git-add"><a href="#提交修改到暂存区域–git-add" class="headerlink" title="提交修改到暂存区域–git add"></a>提交修改到暂存区域–git add</h3><p>通过上面提示可以知道用git add提交，它完整命令参数复杂，只说最常见的两种。一种是添加某个文件，例如app文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add app</div></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-83c3064a82380322.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>提交目录下所有文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add .</div></pre></td></tr></table></figure></p><p>在看看现在状态</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-2b5398db78183f8c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>已变成暂存状态，并且提示可以使用git rm –cached命令将文件从追踪列表移除</p><h3 id="提交到本地仓库–git-commit"><a href="#提交到本地仓库–git-commit" class="headerlink" title="提交到本地仓库–git commit"></a>提交到本地仓库–git commit</h3><p>使用git commit将追踪列表中文件提交<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git commit -m &quot;提交说明&quot;         #形式1：通过-m提交简短信息</div><div class="line">git commit              #形式2：会跳转编辑器，在提交信息有一定格式或文字较多时用</div></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-f55edf7ee0eeac27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>现在工作区是干净的</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-5fe12bd294950c62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="查看项目历史记录–git-log"><a href="#查看项目历史记录–git-log" class="headerlink" title="查看项目历史记录–git log"></a>查看项目历史记录–git log</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log</div></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/5734256-abefe9a3826389b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="下载远程项目–git-clone"><a href="#下载远程项目–git-clone" class="headerlink" title="下载远程项目–git clone"></a>下载远程项目–git clone</h3><p>当想下载网络上别人的仓库时，可使用git clone “地址”，例如下载我github上一个EmptyHand项目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/biloba123/EmptyHand.git</div></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-0a38fe1c12e006d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>会在当前目录下新建一个EmptyHand文件存放</p><h3 id="不同分支–git-branch"><a href="#不同分支–git-branch" class="headerlink" title="不同分支–git branch"></a>不同分支–git branch</h3><p>在上面的操作都显示master，因为默认创建一个master的主分支，不同分支互不影响，当我们开发新功能时一般会新建一个分支在上面操作，因为新加功能可能会有问题最后砍掉这个功能，只有测试通过没有问题再把它合并到master分支上。<br>例如现在开发热点功能，新建一个hotspot分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch hotspot</div></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-db474e33f7795e3a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>看到现在一共两个分支，当前处于master</p><h3 id="切换分支–git-checkout"><a href="#切换分支–git-checkout" class="headerlink" title="切换分支–git checkout"></a>切换分支–git checkout</h3><p>checkout命令用于签出一个分支或者一个路径。常用于分支切换和恢复文件。列入切换到hotspot分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout hotspot</div></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-9b836964c5cef28c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>现在已经在hotspot分支，我们开发啊开发（几天过去了…），功能差不多实现了将代码保存提交</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-51057e60a1a185f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>然而，hotspot出现严重bug，只放弃它<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git checkout master    #切换回master</div><div class="line">git branch -D hotspot     #删除hotspot分支</div></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-a64f9ea385458c5d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>checkout的另一个常用功能是将文件恢复到修改之前状态。比如今天去在ConnectHotspotFragment.java文件里加了好多好多代码，然而写完发现完全不能用…，而且由于太乱之前代码也不能用了。。。<br>别担心通过下面命令可以恢复<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -- ConnectHotspotFragment.java</div></pre></td></tr></table></figure></p><h3 id="合并分支–git-merge"><a href="#合并分支–git-merge" class="headerlink" title="合并分支–git merge"></a>合并分支–git merge</h3><p>如果hotspot开发完成没bug，要将它合并到master分支上。首先提交hotspot代码，切换到主分支，再执行git merge hotspot命令，如果没冲突就能直接合并</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-d9ed7e2e3e0123cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p>合并并不能经常一帆风顺，比如我现在主要负责这个项目，然后有另一个人协助我，我就把hotspot丢给他做，我也继续在主分支上做，但如果我们同时改了MainActivity，那在合并时</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-bd0b824de7ccf3a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>看到代码里</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-80f50bf5b2de5f49.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>两个分支同时改了这里，所以git不知道该用谁的，这时就要手动合并</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-b0b0262c2641ed70.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>然后再git add和commit提交代码即可</p><h3 id="为版本打个标签–git-tag"><a href="#为版本打个标签–git-tag" class="headerlink" title="为版本打个标签–git tag"></a>为版本打个标签–git tag</h3><p>当完成所有功能并通过测试时，通常会为这个版本打个标签<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git tag -a v1.0 -m &quot;相关信息&quot;</div></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-1249a97b056b8b1b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>也可以通过” git tag -d 标签名 “来删除tag，通过” git show 标签名”查看版本具体信息</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-e566fbc1c9b60a75.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="帮助文档–git-help"><a href="#帮助文档–git-help" class="headerlink" title="帮助文档–git help"></a>帮助文档–git help</h3><p>当你不知道某个命令怎么用时，可以通过 git help 来获取其完整说明。例如查看tag命令说明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git help tag</div></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-b21472909e8ef3e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/09/14/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E6%9D%A5%EF%BC%8C%E8%AE%B0%E5%85%A8Git%E5%91%BD%E4%BB%A4%E5%92%8C%E7%94%A8%E6%B3%95/#disqus_thread</comments>
    </item>
    
    <item>
      <title>来一套不一样的Toast--自定义Toast</title>
      <link>http://yoursite.com/2017/09/13/%E6%9D%A5%E4%B8%80%E5%A5%97%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84Toast--%E8%87%AA%E5%AE%9A%E4%B9%89Toast/</link>
      <guid>http://yoursite.com/2017/09/13/%E6%9D%A5%E4%B8%80%E5%A5%97%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84Toast--%E8%87%AA%E5%AE%9A%E4%B9%89Toast/</guid>
      <pubDate>Wed, 13 Sep 2017 14:04:44 GMT</pubDate>
      <description>
      
        &lt;p&gt;Android默认ToastAndroid默认Toast只是一个简单的黑框框，有时觉得太单调了，不如自己实现一套较精致，不一样的Toast。&lt;br&gt;先看下效果（动图可能有点大）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/5734256-a2d05ae14c6c7746.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Android默认ToastAndroid默认Toast只是一个简单的黑框框，有时觉得太单调了，不如自己实现一套较精致，不一样的Toast。<br>先看下效果（动图可能有点大）：</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-a2d05ae14c6c7746.gif?imageMogr2/auto-orient/strip" alt=""></p><a id="more"></a><p>前四个是不同类型的Toast，第五个是个loading框。它们两者实现方式不同，分别进行讲解</p><h2 id="不一样的Toast"><a href="#不一样的Toast" class="headerlink" title="不一样的Toast"></a>不一样的Toast</h2><p>Toast其实并不一定要是在底部弹出的黑色小框框，它也自定义不同的样式</p><h3 id="自定义显示位置"><a href="#自定义显示位置" class="headerlink" title="自定义显示位置"></a>自定义显示位置</h3><p>toast的显示位置可以通过 方法setGravity(int gravity, int xOffset, int yOffset)来设置，<br>参数1是位置有Gravity.BOTTOM，Gravity.CENTER，Gravity.CENTER_HORIZONTAL等，参数2,3是相对于x轴，y轴的偏移量，单位为pix，如果想设置为一定数量dp，可以用以下方法将dp转换为pix<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">final float scale = getContext().getResources().getDisplayMetrics().density;</div><div class="line">int pixels = (int) (dps * scale + 0.5f);</div></pre></td></tr></table></figure></p><p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 65, getResources().getDisplayMetrics());</div></pre></td></tr></table></figure></p><p>比如来显示一个相对于屏幕中心x偏上100pix的toast<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Toast toast=Toast.makeText(this, &quot;啦啦啦~&quot;,Toast.LENGTH_SHORT);</div><div class="line">toast.setGravity(Gravity.CENTER,0,-100);</div><div class="line">toast.show();</div></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-2d080da4ec9028a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/440" alt=""></p><h3 id="加个图标"><a href="#加个图标" class="headerlink" title="加个图标"></a>加个图标</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Toast toast = Toast.makeText(getApplicationContext(),</div><div class="line">                        &quot;带图片的Toast&quot;, Toast.LENGTH_LONG);</div><div class="line">toast.setGravity(Gravity.CENTER, 0, 0);</div><div class="line">LinearLayout llToast = (LinearLayout) toast.getView();</div><div class="line">ImageView ivIcon = new ImageView(getApplicationContext());</div><div class="line">ivIcon.setImageResource(R.drawable.ic_info);</div><div class="line">llToast.addView(ivIcon, 0);</div><div class="line">toast.show();</div></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/5734256-5b0ffc3e492b2884.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/440" alt=""></p><h3 id="完全自定义"><a href="#完全自定义" class="headerlink" title="完全自定义"></a>完全自定义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Toast toast=Toast.makeText(this, &quot;完全不一样&quot;, Toast.LENGTH_LONG);</div><div class="line">toast.setGravity(Gravity.CENTER,0,0);</div><div class="line"></div><div class="line">View v= getLayoutInflater().inflate(R.layout.toast,null);</div><div class="line">toast.setView(v);</div><div class="line">toast.show();</div></pre></td></tr></table></figure><p>toast.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">              android:orientation=&quot;vertical&quot;</div><div class="line">              android:gravity=&quot;center&quot;</div><div class="line">              android:layout_width=&quot;match_parent&quot;</div><div class="line">              android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:background=&quot;@drawable/bg_toast&quot;&gt;</div><div class="line">    &lt;ImageView</div><div class="line">        android:id=&quot;@+id/iv_icon&quot;</div><div class="line">        android:layout_width=&quot;@dimen/toast_icon_size&quot;</div><div class="line">        android:layout_height=&quot;@dimen/toast_icon_size&quot;</div><div class="line">        android:src=&quot;@drawable/ic_info&quot;/&gt;</div><div class="line">    &lt;TextView</div><div class="line">        android:id=&quot;@+id/tv&quot;</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:textColor=&quot;@color/toast_text&quot;</div><div class="line">        android:maxEms=&quot;12&quot;</div><div class="line">        android:layout_marginTop=&quot;@dimen/s_small_spacing&quot;</div><div class="line">        android:textSize=&quot;@dimen/sub_medium_text&quot;/&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p><p>效果就是开头动图里面前四种</p><h2 id="同样式的loading"><a href="#同样式的loading" class="headerlink" title="同样式的loading"></a>同样式的loading</h2><p>loading框的话显示时间不固定，不能用toast来实现，应为它只能显示1.5s或3s，那就用dialog来实现它，这里有一点要注意，就是背景如何做到半透明，并且大小合适<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">View view=LayoutInflater.from(context).inflate</div><div class="line">                (R.layout.toast_loading,null);</div><div class="line">TextView tv=view.findViewById(R.id.tv);</div><div class="line">tv.setText(text);</div><div class="line">AVLoadingIndicatorView avl=view.findViewById(R.id.avl);</div><div class="line">avl.setIndicator(getIndicator(context));</div><div class="line">avl.show();</div><div class="line"></div><div class="line">dialog=new AlertDialog.Builder(context)</div><div class="line">            .setView(view)</div><div class="line">            .setCancelable(false)</div><div class="line">            .create();</div><div class="line">dialog.show();</div></pre></td></tr></table></figure></p><p><em>AVLoadingIndicatorView 是一个loadingView的开源库，有多种样式，这里随机获取一种<a href="https://github.com/81813780/AVLoadingIndicatorView" target="_blank" rel="external">https://github.com/81813780/AVLoadingIndicatorView</a></em></p><p>toast_loading.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">              xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class="line">              android:orientation=&quot;vertical&quot;</div><div class="line">              android:gravity=&quot;center&quot;</div><div class="line">              android:layout_width=&quot;match_parent&quot;</div><div class="line">              android:layout_height=&quot;match_parent&quot;</div><div class="line">              android:background=&quot;@drawable/bg_toast_loading&quot;&gt;</div><div class="line">    &lt;com.wang.avi.AVLoadingIndicatorView</div><div class="line">        android:id=&quot;@+id/avl&quot;</div><div class="line">        app:indicatorColor=&quot;@color/toast_text&quot;</div><div class="line">        app:indicatorName=&quot;LineScaleIndicator&quot;</div><div class="line">        android:layout_width=&quot;@dimen/toast_icon_size&quot;</div><div class="line">        android:layout_height=&quot;@dimen/toast_icon_size&quot;/&gt;</div><div class="line">    &lt;TextView</div><div class="line">        android:id=&quot;@+id/tv&quot;</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:textColor=&quot;@color/toast_text&quot;</div><div class="line">        android:maxEms=&quot;12&quot;</div><div class="line">        android:layout_marginTop=&quot;@dimen/s_small_spacing&quot;</div><div class="line">        android:textSize=&quot;@dimen/sub_medium_text&quot;/&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p><p>然而出来的效果</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-d3cd6f91a32c86cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/440" alt=""></p><p>这这效果。。。背景还是纯白，宽度不是wrap_content。这里需要自己写个dialog的theme，如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;style name=&quot;CustomDialog&quot; parent=&quot;android:Theme.Dialog&quot;&gt;</div><div class="line">        &lt;item name=&quot;android:windowIsTranslucent&quot;&gt;true&lt;/item&gt;</div><div class="line">        &lt;item name=&quot;android:windowBackground&quot;&gt;@android:color/transparent&lt;/item&gt;</div><div class="line">    &lt;/style&gt;</div></pre></td></tr></table></figure></p><p>然后在创建AlertDialog.Builder时传进去<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dialog=new AlertDialog.Builder(context,R.style.CustomDialog)</div><div class="line">                .setView(view)</div><div class="line">...</div></pre></td></tr></table></figure></p><p>再看效果</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-60cb818e1ce8d424.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/440" alt=""></p><p>封装类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div></pre></td><td class="code"><pre><div class="line">import android.content.Context;</div><div class="line">import android.support.v7.app.AlertDialog;</div><div class="line">import android.view.Gravity;</div><div class="line">import android.view.LayoutInflater;</div><div class="line">import android.view.View;</div><div class="line">import android.widget.ImageView;</div><div class="line">import android.widget.TextView;</div><div class="line">import android.widget.Toast;</div><div class="line"></div><div class="line">import com.example.myframe.R;</div><div class="line">import com.wang.avi.AVLoadingIndicatorView;</div><div class="line"></div><div class="line">import java.util.Random;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Author：LvQingYang</div><div class="line"> * Date：2017/8/18</div><div class="line"> * Email：biloba12345@gamil.com</div><div class="line"> * Github：https://github.com/biloba123</div><div class="line"> *Blog：https://biloba123.github.io/</div><div class="line"> * Info：</div><div class="line"> */</div><div class="line">public class MyToast &#123;</div><div class="line">    private static Toast toast;</div><div class="line">    private static AlertDialog dialog;</div><div class="line">    //info toast</div><div class="line">    public static void info(Context context ,String text, int duration)&#123;</div><div class="line">        showToast(context, R.drawable.ic_info, text, duration);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void info(Context context ,int textId, int duration)&#123;</div><div class="line">        showToast(context, R.drawable.ic_info,context.getString(textId),duration);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void info(Context context ,String text)&#123;</div><div class="line">        showToast(context, R.drawable.ic_info, text, Toast.LENGTH_SHORT);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void info(Context context ,int textId)&#123;</div><div class="line">        showToast(context, R.drawable.ic_info,context.getString(textId),Toast.LENGTH_SHORT);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //success</div><div class="line">    public static void success(Context context ,String text, int duration)&#123;</div><div class="line">        showToast(context, R.drawable.ic_success, text, duration);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void success(Context context ,int textId, int duration)&#123;</div><div class="line">        showToast(context, R.drawable.ic_success, context.getString(textId),duration);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void success(Context context ,String text)&#123;</div><div class="line">        showToast(context, R.drawable.ic_success, text, Toast.LENGTH_SHORT);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void success(Context context ,int textId)&#123;</div><div class="line">        showToast(context, R.drawable.ic_success, context.getString(textId),Toast.LENGTH_SHORT);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //error</div><div class="line">    public static void error(Context context ,String text, int duration)&#123;</div><div class="line">        showToast(context, R.drawable.ic_error, text, duration);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void error(Context context ,int textId, int duration)&#123;</div><div class="line">        showToast(context, R.drawable.ic_error, context.getString(textId),duration);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void error(Context context ,String text)&#123;</div><div class="line">        showToast(context, R.drawable.ic_error, text, Toast.LENGTH_SHORT);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void error(Context context ,int textId)&#123;</div><div class="line">        showToast(context, R.drawable.ic_error, context.getString(textId),Toast.LENGTH_SHORT);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //loading</div><div class="line">    public static void loading(Context context ,String text)&#123;</div><div class="line">        View view=LayoutInflater.from(context).inflate</div><div class="line">                (R.layout.toast_loading,null);</div><div class="line">        TextView tv=view.findViewById(R.id.tv);</div><div class="line">        tv.setText(text);</div><div class="line">        AVLoadingIndicatorView avl=view.findViewById(R.id.avl);</div><div class="line">        avl.setIndicator(getIndicator(context));</div><div class="line">        avl.show();</div><div class="line"></div><div class="line">        dialog=new AlertDialog.Builder(context,R.style.CustomDialog)</div><div class="line">                .setView(view)</div><div class="line">                .setCancelable(false)</div><div class="line">                .create();</div><div class="line">        dialog.show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    public static void loading(Context context ,int textId)&#123;</div><div class="line">        loading(context, context.getString(textId));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //warning</div><div class="line">    public static void warning(Context context ,String text, int duration)&#123;</div><div class="line">        showToast(context, R.drawable.ic_warning, text, duration);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void warning(Context context ,int textId, int duration)&#123;</div><div class="line">        showToast(context, R.drawable.ic_warning, context.getString(textId),duration);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void warning(Context context ,String text)&#123;</div><div class="line">        showToast(context, R.drawable.ic_warning, text, Toast.LENGTH_SHORT);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void warning(Context context ,int textId)&#123;</div><div class="line">        showToast(context, R.drawable.ic_warning, context.getString(textId),Toast.LENGTH_SHORT);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void cancel()&#123;</div><div class="line">        if (toast != null) &#123;</div><div class="line">            toast.cancel();</div><div class="line">        &#125;</div><div class="line">        if (dialog != null) &#123;</div><div class="line">            dialog.cancel();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    static void showToast(Context context, int iconId, String text, int duration)&#123;</div><div class="line">        if (toast != null) &#123;</div><div class="line">            toast.cancel();</div><div class="line">        &#125;</div><div class="line">        toast=Toast.makeText(context, text, duration);</div><div class="line">        toast.setGravity(Gravity.CENTER,0,0);</div><div class="line"></div><div class="line">        View v= LayoutInflater.from(context).inflate</div><div class="line">                (R.layout.toast,null);</div><div class="line">        ImageView ivIcon=v.findViewById(R.id.iv_icon);</div><div class="line">        ivIcon.setImageResource(iconId);</div><div class="line">        TextView tv=v.findViewById(R.id.tv);</div><div class="line">        tv.setText(text);</div><div class="line"></div><div class="line">        toast.setView(v);</div><div class="line">        toast.show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private static String getIndicator(Context context)</div><div class="line">    &#123;</div><div class="line">        String[] arrayOfString = context.getResources().getStringArray(R.array.arr_indicator);</div><div class="line">        int i = new Random().nextInt(arrayOfString.length);</div><div class="line">        return arrayOfString[i];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/09/13/%E6%9D%A5%E4%B8%80%E5%A5%97%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84Toast--%E8%87%AA%E5%AE%9A%E4%B9%89Toast/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Fragment中添加menu</title>
      <link>http://yoursite.com/2017/09/13/Fragment%E4%B8%AD%E6%B7%BB%E5%8A%A0menu/</link>
      <guid>http://yoursite.com/2017/09/13/Fragment%E4%B8%AD%E6%B7%BB%E5%8A%A0menu/</guid>
      <pubDate>Wed, 13 Sep 2017 12:43:12 GMT</pubDate>
      <description>
      
        &lt;p&gt;Fragment是Android里面中一个非常灵巧的设计，它可以看做ui模块，由活动托管。熟练的使用它们能优雅的实现很复杂的界面，而且用它们编写UI界面，相对于用一个个Activity所消耗内存少得多，而且切换很流畅，可以参考知乎客户端。&lt;/p&gt;
&lt;p&gt;但是，Fragment使用过程中会出现一些小问题，这里讲如何在Fragment中添加menu。我们都知道在活动中添加menu只用编写好menu，在onCreateOptionsMenu中加载，并在onOptionsItemSelected中处理点击事件就可以了，按照这个流程先试下&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Fragment是Android里面中一个非常灵巧的设计，它可以看做ui模块，由活动托管。熟练的使用它们能优雅的实现很复杂的界面，而且用它们编写UI界面，相对于用一个个Activity所消耗内存少得多，而且切换很流畅，可以参考知乎客户端。</p><p>但是，Fragment使用过程中会出现一些小问题，这里讲如何在Fragment中添加menu。我们都知道在活动中添加menu只用编写好menu，在onCreateOptionsMenu中加载，并在onOptionsItemSelected中处理点击事件就可以了，按照这个流程先试下</p><a id="more"></a><p>首先编写menu.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">      xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&gt;</div><div class="line">    &lt;item android:id=&quot;@+id/item_setting&quot;</div><div class="line">          android:icon=&quot;@drawable/ic_settings&quot;</div><div class="line">          android:title=&quot;@string/setting&quot;</div><div class="line">        app:showAsAction=&quot;always&quot;/&gt;</div><div class="line">&lt;/menu&gt;</div></pre></td></tr></table></figure></p><p>这里只添加一个设置的menu item</p><p>然后要加载menu需要toolbar或actionbar，这里分两种情况：</p><ol><li><p>用Activity中actionbar或toolbar，在Fragment中不添加toolbar<br>只需在Activity中初始化好标题栏（用toolbar时要调用setSupportActionBar），在fragment中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) &#123;</div><div class="line">        inflater.inflate(R.menu.menu_main,menu);</div><div class="line">        super.onCreateOptionsMenu(menu, inflater);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></li><li><p>去除Activity中标题栏，在Fragment中添加toolbar<br>在fragment中初始化标题栏时要注意，fragment中没有setSupportActionBar方法，也就是在标题栏还是要交给托管其的活动来处理，标题栏最终设置到window上，代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">     * Fragment中初始化Toolbar</div><div class="line">     * @param toolbar</div><div class="line">     * @param title 标题</div><div class="line">     * @param isDisplayHomeAsUp 是否显示返回箭头</div><div class="line">     */</div><div class="line">    public void initToolbar(Toolbar toolbar, String title, boolean isDisplayHomeAsUp) &#123;</div><div class="line">        AppCompatActivity appCompatActivity= (AppCompatActivity) getActivity();</div><div class="line">        appCompatActivity.setSupportActionBar(toolbar);</div><div class="line">        ActionBar actionBar = appCompatActivity.getSupportActionBar();</div><div class="line">        if (actionBar != null) &#123;</div><div class="line">            actionBar.setTitle(title);</div><div class="line">            actionBar.setDisplayHomeAsUpEnabled(isDisplayHomeAsUp);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></li></ol><p>然后再调用onCreateOptionsMenu加载到toolbar上</p><p>运行一下，你会发现两种情况下menu都没加载出来。原来要在fragment中加载menu还需在其onCreate中加一句 setHasOptionsMenu(true)，用于让活动知道有menu要加载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">    public void onCreate(@Nullable Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setHasOptionsMenu(true);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>现在menu加载出来了</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-1662e02234040b6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/440" alt=""></p><p>然后重写onOptionsItemSelected处理点击事件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">    public boolean onOptionsItemSelected(MenuItem item) &#123;</div><div class="line">        switch (item.getItemId()) &#123;</div><div class="line">            case R.id.item_setting:</div><div class="line">                SettingActivity.start(getContext());</div><div class="line">                return true;</div><div class="line">            default:</div><div class="line">                return super.onOptionsItemSelected(item);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>现在就大功告成了吗，然而运行后会发现无论怎么点击onOptionsItemSelected都没被调用。可以再android training中找到原因<br><a href="http://developer.android.com/guide/topics/ui/actionbar.html" target="_blank" rel="external">http://developer.android.com/guide/topics/ui/actionbar.html</a></p><blockquote><p>Note: If you added the menu item from a fragment, via the Fragment class’s onCreateOptionsMenu callback, then the system calls the respective onOptionsItemSelected() method for that fragment when the user selects one of the fragment’s items. However the activity gets a chance to handle the event first, so the system calls onOptionsItemSelected() on the activity before calling the same callback for the fragment.</p></blockquote><p>也就是说在虽然在fragment中重写onOptionsItemSelected，但系统会在activity中先调用onOptionsItemSelected，而活动中默认都消耗了点击事件，fragment中因此无法处理点击。所以要先在托管碎片的活动中讲frament中处理的menu item返回false，让点击事件能穿到fragment的onOptionsItemSelected中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">    public boolean onOptionsItemSelected(MenuItem paramMenuItem) &#123;</div><div class="line">         switch (paramMenuItem.getItemId()) &#123;</div><div class="line">            case R.id.item_setting:</div><div class="line">                return false;</div><div class="line">            default:</div><div class="line">                return super.onOptionsItemSelected(paramMenuItem);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p><strong>总结下</strong><br>要在fragment添加menu需要以下步骤：</p><ol><li>在fragment的onCreate中添加一句 <strong>setHasOptionsMenu(true)；</strong></li><li>如果用的是活动的标题栏，只需在<strong>onCreateOptionsMenu</strong>中加载menu；如果用Fragment自己的toolbar需要先<strong>用活动初始化toolbar</strong>，然后再onCreateOptionsMenu</li><li><strong>在活动中重写onOptionsItemSelected，讲需要在fragment中处理的menu item直接返回false，再在fragment的onOptionsItemSelected中处理</strong></li></ol>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/09/13/Fragment%E4%B8%AD%E6%B7%BB%E5%8A%A0menu/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Android样式开发完全指南</title>
      <link>http://yoursite.com/2017/09/11/Android%E6%A0%B7%E5%BC%8F%E5%BC%80%E5%8F%91%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97/</link>
      <guid>http://yoursite.com/2017/09/11/Android%E6%A0%B7%E5%BC%8F%E5%BC%80%E5%8F%91%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97/</guid>
      <pubDate>Mon, 11 Sep 2017 13:58:28 GMT</pubDate>
      <description>
      
        &lt;p&gt;记得刚开始学Android时，看着自己完全用系统控件写出的不忍直视的界面，对于如何做出不一样的按钮，让它们在不同状态下有不一样的效果很是好奇。后来才知道了些shape，selector之类，但很长时间以来都没对样式开发做过全面的整理（主要因为懒…），所以有了这篇文章。&lt;/p&gt;
&lt;p&gt;好了废话不多说，开始我们的样式开发之旅。因为整理了基本所有的样式，文章可能有点长，可以收藏下来看，当然看的时候也要自己试试效果，不然很容易过几天又忘记了，下次用的时候还要翻一遍。&lt;br&gt;本文将按下面几个模块讲：&lt;br&gt;&lt;strong&gt;1. shape：基础的形状定义&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;2. selector：不同状态下的形状变化&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;3. layer-list：多个形状层叠&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;4. drawable：各式drawable和drawable动画&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;5. View Animation：简单的视图动画&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;6. Property Animation：更强大的属性动画&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;7. style和theme&lt;/strong&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>记得刚开始学Android时，看着自己完全用系统控件写出的不忍直视的界面，对于如何做出不一样的按钮，让它们在不同状态下有不一样的效果很是好奇。后来才知道了些shape，selector之类，但很长时间以来都没对样式开发做过全面的整理（主要因为懒…），所以有了这篇文章。</p><p>好了废话不多说，开始我们的样式开发之旅。因为整理了基本所有的样式，文章可能有点长，可以收藏下来看，当然看的时候也要自己试试效果，不然很容易过几天又忘记了，下次用的时候还要翻一遍。<br>本文将按下面几个模块讲：<br><strong>1. shape：基础的形状定义</strong><br><strong>2. selector：不同状态下的形状变化</strong><br><strong>3. layer-list：多个形状层叠</strong><br><strong>4. drawable：各式drawable和drawable动画</strong><br><strong>5. View Animation：简单的视图动画</strong><br><strong>6. Property Animation：更强大的属性动画</strong><br><strong>7. style和theme</strong></p><a id="more"></a><h2 id="1-shape"><a href="#1-shape" class="headerlink" title="1. shape"></a>1. shape</h2><p>shape用来定义基本的形状，一般项目的drawable目录下，布局中各view通过设置android:background属性来引用。</p><h3 id="rectangle（矩形，默认的形状）"><a href="#rectangle（矩形，默认的形状）" class="headerlink" title="rectangle（矩形，默认的形状）"></a>rectangle（矩形，默认的形状）</h3><p>新建一个drawable resource file，取名为bg_btn，来为按钮定义形状，根节点默认是selector，改成shape，shape下能设置多个特性，我们一个一个来看</p><p><strong>solid</strong>：设置形状填充的颜色，只有android:color一个属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class="line">    &lt;solid android:color=&quot;@android:color/holo_blue_dark&quot;/&gt;</div><div class="line">&lt;/shape&gt;</div></pre></td></tr></table></figure></p><p>效果和直接设置view的background为颜色一样</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-8334c20f0b9a4986.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><strong>padding</strong>：设置内容与形状边界的内间距，可分别设置左右上下的距离</p><ul><li>android:left 左内间距</li><li>android:right 右内间距</li><li>android:top 上内间距</li><li>android:bottom 下内间距<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class="line">    &lt;solid android:color=&quot;@android:color/holo_blue_dark&quot;/&gt;</div><div class="line">    &lt;padding android:top=&quot;16dp&quot;</div><div class="line">             android:bottom=&quot;16dp&quot;/&gt;</div><div class="line">&lt;/shape&gt;</div></pre></td></tr></table></figure></li></ul><p>当然也和直接设置view的padding一样，不过当你的shape多次使用时，在shape中设置padding就免去为每个控件单独设置padding<br><img src="http://upload-images.jianshu.io/upload_images/5734256-bef56bf46605fd2a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><strong>gradient</strong>：设置形状的渐变颜色，可以是<br><em>线性渐变（linear，默认的渐变类型）</em><br><em>辐射渐变（radial ，以圆形从圆形向周围渐变，android:gradientRadius也必须设置）</em><br><em>扫描性渐变（sweep ,以一条水平线逆时针扫描渐变）</em></p><ul><li>android:type 渐变的类型</li><li>android:startColor 渐变开始的颜色</li><li>android:endColor 渐变结束的颜色</li><li>android:centerColor 渐变中间的颜色</li><li>android:angle 渐变的角度，线性渐变时才有效，必须是45的倍数，0表示从左到右，90表示从下到上</li><li>android:centerX 渐变中心的相对X坐标，放射渐变时才有效，在0.0到1.0之间，默认为0.5，表示在正中间</li><li>android:centerY 渐变中心的相对X坐标，放射渐变时才有效，在0.0到1.0之间，默认为0.5，表示在正中间</li><li>android:gradientRadius 渐变的半径，渐变类型为radial时使用</li></ul><p><strong>linear渐变效果</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;gradient android:type=&quot;linear&quot;</div><div class="line">              android:startColor=&quot;#18d1ff&quot;</div><div class="line">              android:centerColor=&quot;#4953fd&quot;</div><div class="line">              android:endColor=&quot;#5718bc&quot;</div><div class="line">        android:angle=&quot;0&quot;/&gt;</div><div class="line">&lt;/shape&gt;</div></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-26be370dd0834dd8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>这里的渐变方向由android:angle来设置</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-73acd06ed9f7c43d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="45度时"></p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-1757c18df0ea487f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="-90度时"></p><p><strong>radial渐变效果</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class="line">    &lt;gradient android:type=&quot;radial&quot;</div><div class="line">              android:startColor=&quot;#18d1ff&quot;</div><div class="line">              android:centerColor=&quot;#4953fd&quot;</div><div class="line">              android:endColor=&quot;#5718bc&quot;</div><div class="line">        android:gradientRadius=&quot;160dp&quot;/&gt;</div><div class="line">&lt;/shape&gt;</div></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-02c54ca4e239396f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt=""></p><p>渐变中心由(centerX, centerY)确定，比如我们都把它设为0</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-8ac571589b518c50.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt=""></p><p><strong>sweep渐变效果</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class="line">    &lt;gradient android:type=&quot;sweep&quot;</div><div class="line">              android:startColor=&quot;#18d1ff&quot;</div><div class="line">              android:centerColor=&quot;#4953fd&quot;</div><div class="line">              android:endColor=&quot;#5718bc&quot;/&gt;</div><div class="line">&lt;/shape&gt;</div></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-b715f0d1a82b9f62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt=""></p><p><strong>corners</strong>：设置圆角，只适用于rectangle类型</p><ul><li>android:radius 圆角半径，会被下面每个具体的圆角属性覆盖</li><li>android:topLeftRadius 左上角的半径</li><li>android:topRightRadius 右上角的半径</li><li>android:bottomLeftRadius 左下角的半径</li><li>android:bottomRightRadius 右下角的半径<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class="line">    &lt;gradient android:startColor=&quot;#0564fe&quot;</div><div class="line">              android:centerColor=&quot;#3b45ef&quot;</div><div class="line">              android:endColor=&quot;#6f28e0&quot;/&gt;</div><div class="line">    &lt;corners android:radius=&quot;24dp&quot;/&gt;</div><div class="line">&lt;/shape&gt;</div></pre></td></tr></table></figure></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/5734256-b2c3419c00721cb9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>分别设置topLeftRadius，topRightRadius，bottomLeftRadius</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-e4fd99e7c4a939ea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><strong>stroke</strong>：设置描边，实线或虚线</p><ul><li>android:color 描边的颜色</li><li>android:width 描边的宽度</li><li>android:dashWidth 设置虚线时的横线长度</li><li>android:dashGap 设置虚线时的横线之间的距离<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class="line">    &lt;stroke android:color=&quot;@android:color/darker_gray&quot;</div><div class="line">            android:width=&quot;2dp&quot;/&gt;</div><div class="line">&lt;/shape&gt;</div></pre></td></tr></table></figure></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/5734256-db89615b5b89d827.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="实线"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class="line">    &lt;stroke android:color=&quot;@android:color/darker_gray&quot;</div><div class="line">            android:width=&quot;2dp&quot;</div><div class="line">            android:dashWidth=&quot;4dp&quot;</div><div class="line">        android:dashGap=&quot;6dp&quot;/&gt;</div><div class="line">&lt;/shape&gt;</div></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/5734256-128034eeb953453f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="虚线"></p><h3 id="oval（椭圆形，常用来画圆形）"><a href="#oval（椭圆形，常用来画圆形）" class="headerlink" title="oval（椭圆形，常用来画圆形）"></a>oval（椭圆形，常用来画圆形）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:shape=&quot;oval&quot;&gt;</div><div class="line">    &lt;solid android:color=&quot;@android:color/holo_blue_dark&quot;/&gt;</div><div class="line">    &lt;gradient android:type=&quot;radial&quot;</div><div class="line">            android:startColor=&quot;#ffffff&quot;</div><div class="line">              android:endColor=&quot;#a1a1a1&quot;</div><div class="line">            android:gradientRadius=&quot;64dp&quot;/&gt;</div><div class="line">    &lt;size android:height=&quot;128dp&quot;</div><div class="line">          android:width=&quot;128dp&quot;/&gt;</div><div class="line">&lt;/shape&gt;</div></pre></td></tr></table></figure><p>这里有个size节点，它是用来设置形状大小的，但一般不用它，比如我们现在把这个圆形设置给一个长宽不相等的控件，那效果还是椭圆，因为shape会被拉伸或压缩。不过我用到radial渐变，想让它从圆心刚好渐变到圆周，所以设置了size，并设置gradientRadius为size长宽的一半，这样无论设置给多大的控件都能正确显示</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-197cf045ba8cce29.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="line（线形，画实线和虚线）"><a href="#line（线形，画实线和虚线）" class="headerlink" title="line（线形，画实线和虚线）"></a>line（线形，画实线和虚线）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:shape=&quot;line&quot;&gt;</div><div class="line">    &lt;stroke android:color=&quot;@android:color/darker_gray&quot;</div><div class="line">            android:width=&quot;2dp&quot;</div><div class="line">            android:dashWidth=&quot;4dp&quot;</div><div class="line">            android:dashGap=&quot;6dp&quot;/&gt;</div><div class="line">&lt;/shape&gt;</div></pre></td></tr></table></figure><p>画线一般用来分隔内容，上面我们画了一条虚线，把它设置给View，运行出来你发现怎么变成实线了，我要的虚线呢，这不是坑吗？？？ （╯‵□′）╯︵┴─┴<br>原来要想显示出虚线要给View设置android:layerType，为”software”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;View</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;16dp&quot;</div><div class="line">        android:layerType=&quot;software&quot;</div><div class="line">        android:background=&quot;@drawable/bg_div&quot;/&gt;</div></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-fa6518b7d0ae07aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><strong>画线时，有几点特性必须要知道的：</strong></p><ol><li>只能画水平线，画不了竖线；</li><li>线的高度是通过stroke的android:width属性设置的；</li><li>size的android:height属性定义的是整个形状区域的高度；</li><li>size的height必须大于stroke的width，否则，线无法显示；</li><li>线在整个形状区域中是居中显示的；</li><li>线左右两边会留有空白间距，线越粗，空白越大；</li><li>引用虚线的view需要添加属性android:layerType，值设为”software”，否则显示不了虚线。</li></ol><h3 id="ring（环形，可以画环形进度条）"><a href="#ring（环形，可以画环形进度条）" class="headerlink" title="ring（环形，可以画环形进度条）"></a>ring（环形，可以画环形进度条）</h3><p>shape根元素有些属性只适用于ring类型，先来看看这些属性吧：</p><ul><li>android:innerRadius 内环的半径</li><li>android:innerRadiusRatio 浮点型，以环的宽度比率来表示内环的半径，默认为3，表示内环半径为环的宽度除以3，该值会被android:innerRadius覆盖</li><li>android:thickness 环的厚度</li><li>android:thicknessRatio 浮点型，以环的宽度比率来表示环的厚度，默认为9，表示环的厚度为环的宽度除以9，该值会被android:thickness覆盖</li><li>android:useLevel 一般为false，否则可能环形无法显示，只有作为LevelListDrawable使用时才设为true<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">       android:shape=&quot;ring&quot;</div><div class="line">       android:innerRadiusRatio=&quot;3&quot;</div><div class="line">       android:thicknessRatio=&quot;12&quot;</div><div class="line">       android:useLevel=&quot;false&quot;&gt;</div><div class="line">    &lt;gradient</div><div class="line">        android:startColor=&quot;@android:color/white&quot;</div><div class="line">        android:endColor=&quot;@android:color/holo_blue_dark&quot;</div><div class="line">        android:type=&quot;sweep&quot; /&gt;</div><div class="line">    &lt;stroke</div><div class="line">        android:width=&quot;2dp&quot;</div><div class="line">        android:color=&quot;@android:color/darker_gray&quot; /&gt;</div><div class="line">&lt;/shape&gt;</div></pre></td></tr></table></figure></li></ul><p><em>用innerRadiusRatio和thicknessRatio控制环内环和厚度占比是，两个倒数相加不能超过1/2，不然就不是环了，比如这里1/3 + 1/12 &lt; 1/2</em></p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-c97c7b6847d084e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>但这进度条不会转叫什么进度条，下面会讲到如何让它转起来</p><h2 id="2-selector"><a href="#2-selector" class="headerlink" title="2. selector"></a>2. selector</h2><p>上面我们讲了如何定义各种形状，并设置给控件，但开发中如果想让在不同状态下展示不同形状，比如按钮正常状态下一种形状，点击是另一种形状，这样对用户交互比较好，能让用户得到他操作后的反馈，这就要用到selector。</p><p>那首先有必要知道都有哪些状态：</p><ul><li><strong>android:state_enabled</strong>: 设置触摸或点击事件是否可用状态，一般只在false时设置该属性，表示不可用状态</li><li><strong>android:state_pressed</strong>: 设置是否按压状态，一般在true时设置该属性，表示已按压状态</li><li><strong>android:state_selected</strong>: 设置是否选中状态，true表示已选中，false表示未选中</li><li><strong>android:state_checked</strong>: 设置是否勾选状态，主要用于CheckBox和RadioButton，true表示已被勾选，false表示未被勾选</li><li><strong>android:state_checkable</strong>: 设置勾选是否可用状态，类似state_enabled，只是–state_enabled会影响触摸或点击事件，而state_checkable影响勾选事件</li><li><strong>android:state_focused</strong>: 设置是否获得焦点状态，true表示获得焦点，默认为false，表示未获得焦点</li><li><strong>android:state_window_focused</strong>: 设置当前窗口是否获得焦点状态，true表示获得焦点，false表示未获得焦点，例如拉下通知栏或弹出对话框时，当前界面就会失去焦点</li><li><strong>android:state_activated</strong>: 设置是否被激活状态，true表示被激活，false表示未激活，API Level 11及以上才支持，可通过代码调用控件的setActivated(boolean)方法设置是否激活该控件</li><li><strong>android:state_hovered</strong>: 设置是否鼠标在上面滑动的状态，true表示鼠标在上面滑动，默认为false，API Level 14及以上才支持</li></ul><p>一看到这么多状态是不是感觉头疼，不过平时用到比较多的也就 state_enabled，state_pressed，state_selected，输入框可能会用到state_focused</p><p>接下来，看看代码，以下是bg_btn_selector.xml的代码，用于按钮的背景，如果只是背景颜色的变化可以在res下新建一个color文件夹在里面创建selector作为color资源，如果是形状的变化则只能放到drawable下作为drawable资源，也是通过android:background设置给view：</p><p><strong>color\bg_btn_selector.xml</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;selector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class="line">    &lt;item android:state_enabled=&quot;false&quot; android:color=&quot;@android:color/darker_gray&quot;/&gt;</div><div class="line">    &lt;item android:state_pressed=&quot;true&quot; android:color=&quot;@android:color/holo_blue_dark&quot;/&gt;</div><div class="line">    &lt;item android:state_selected=&quot;true&quot; android:color=&quot;@android:color/holo_blue_dark&quot;/&gt;</div><div class="line">    &lt;item android:color=&quot;@android:color/holo_blue_light&quot;/&gt;</div><div class="line">&lt;/selector&gt;</div></pre></td></tr></table></figure></p><p>android:color只能引用@color</p><p><strong>drawable\bg_btn_selector.xml</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;selector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class="line">    &lt;item android:state_enabled=&quot;false&quot; android:drawable=&quot;@drawable/bg_btn_disable&quot;/&gt;</div><div class="line">    &lt;item android:state_pressed=&quot;true&quot; android:drawable=&quot;@drawable/bg_btn_pressed&quot;/&gt;</div><div class="line">    &lt;item android:state_selected=&quot;true&quot; android:drawable=&quot;@drawable/bg_btn_selected&quot;/&gt;</div><div class="line">    &lt;item android:drawable=&quot;@drawable/bg_btn_normal&quot;/&gt;</div><div class="line">&lt;/selector&gt;</div></pre></td></tr></table></figure></p><p>android:drawable指定的都是定义的shape，它除了引用@drawable资源，也可以引用@color颜色值</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-68d9fe89670abc6a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="正常状态"></p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-9aa71d08720180a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="按压状态"></p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-e69151745bb3df2d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="不可用时"></p><p><strong>注意</strong>：状态是从上往下匹配的，如果匹配到一个item那它就将采用这个item，而不是采用最佳匹配的规则；所以设置默认的状态，一定要写在最后，如果写在前面，则后面所有的item都不会起作用了。</p><p>除此之外，selector标签下有两个比较常用的属性，会在状态改变时出现淡入淡出效果，但必须在API Level 11及以上才支持：</p><ul><li>android:enterFadeDuration 状态改变时，新状态展示时的淡入时间，以毫秒为单位</li><li>android:exitFadeDuration 状态改变时，旧状态消失时的淡出时间，以毫秒为单位</li></ul><h2 id="3-layer-list"><a href="#3-layer-list" class="headerlink" title="3. layer-list"></a>3. layer-list</h2><p>shape只能画出矩形，椭圆，线，环这些基本的形状，有时我们需要一些稍微复杂些的形状，一种解决方案是使用图片，但图片要准备不同尺寸以适应不同分辨率手机，太多图片资源会造成安装包过大，其实可以用layer-list来自己实现一些复杂形状</p><p>先来看看要实现效果</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-bfd230a842b3e88f.gif?imageMogr2/auto-orient/strip" alt=""></p><p>一个带阴影的button，未点击时阴影窄且深，按压时阴影变宽且颜色变浅。它首先是selector实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;selector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class="line">    &lt;item android:state_pressed=&quot;true&quot; android:drawable=&quot;@drawable/bg_btn_pressed&quot;/&gt;</div><div class="line">    &lt;item android:state_selected=&quot;true&quot; android:drawable=&quot;@drawable/bg_btn_selected&quot;/&gt;</div><div class="line">    &lt;item android:drawable=&quot;@drawable/bg_btn_normal&quot;/&gt;</div><div class="line">&lt;/selector&gt;</div></pre></td></tr></table></figure></p><p>来看bg_btn_pressed，bg_btn_selected它们是一样的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;layer-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class="line"></div><div class="line">    &lt;!--灰色背景--&gt;</div><div class="line">    &lt;item&gt;</div><div class="line">        &lt;shape&gt;</div><div class="line">            &lt;solid android:color=&quot;#c4c4c4&quot;/&gt;</div><div class="line">            &lt;corners android:radius=&quot;12dp&quot;/&gt;</div><div class="line">        &lt;/shape&gt;</div><div class="line">    &lt;/item&gt;</div><div class="line"></div><div class="line">    &lt;!--蓝色前景--&gt;</div><div class="line">    &lt;item android:bottom=&quot;6dp&quot;</div><div class="line">        android:right=&quot;6dp&quot;&gt;</div><div class="line">        &lt;shape&gt;</div><div class="line">            &lt;solid android:color=&quot;@android:color/holo_blue_dark&quot;/&gt;</div><div class="line">            &lt;corners android:radius=&quot;12dp&quot;/&gt;</div><div class="line">        &lt;/shape&gt;</div><div class="line">    &lt;/item&gt;</div><div class="line">&lt;/layer-list&gt;</div></pre></td></tr></table></figure></p><p>layer-list作为根节点，也可以作为selector中item的子节点。layer-list可以添加多个item子节点，每个item子节点对应一个drawable资源，按照item从上到下的顺序叠加在一起，再通过设置每个item的偏移量就可以看到阴影效果了。<br>layer-list的item可以通过下面四个属性设置偏移量：</p><ul><li>android:top 顶部的偏移量</li><li>android:bottom 底部的偏移量</li><li>android:left 左边的偏移量</li><li>android:right 右边的偏移量</li></ul><p>这四个偏移量和控件的margin设置差不多，都是外间距的效果。如何不设置偏移量，前面的图层就完全挡住了后面的图层，从而也看不到后面的图层效果了。</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-0890cea4399b346e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>然后是bg_btn_normal.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;layer-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class="line"></div><div class="line">    &lt;!--透明背景--&gt;</div><div class="line">    &lt;item&gt;</div><div class="line">        &lt;shape&gt;</div><div class="line">            &lt;solid android:color=&quot;@android:color/transparent&quot;/&gt;</div><div class="line">            &lt;corners android:radius=&quot;12dp&quot;/&gt;</div><div class="line">        &lt;/shape&gt;</div><div class="line">    &lt;/item&gt;</div><div class="line"></div><div class="line">    &lt;!--灰色背景--&gt;</div><div class="line">    &lt;item android:bottom=&quot;3dp&quot;</div><div class="line">        android:right=&quot;3dp&quot;&gt;</div><div class="line">        &lt;shape&gt;</div><div class="line">            &lt;solid android:color=&quot;#bebebe&quot;/&gt;</div><div class="line">            &lt;corners android:radius=&quot;12dp&quot;/&gt;</div><div class="line">        &lt;/shape&gt;</div><div class="line">    &lt;/item&gt;</div><div class="line"></div><div class="line">    &lt;!--蓝色前景--&gt;</div><div class="line">    &lt;item android:bottom=&quot;6dp&quot;</div><div class="line">          android:right=&quot;6dp&quot;&gt;</div><div class="line">        &lt;shape&gt;</div><div class="line">            &lt;solid android:color=&quot;@android:color/holo_blue_light&quot;/&gt;</div><div class="line">            &lt;corners android:radius=&quot;12dp&quot;/&gt;</div><div class="line">        &lt;/shape&gt;</div><div class="line">    &lt;/item&gt;</div><div class="line">&lt;/layer-list&gt;</div></pre></td></tr></table></figure></p><p>第一个item是一个透明的shape，再在它上面加阴影效果，应为直接加阴影的话，normal状态时button的大小要比按压时大，看起来不太好。这里保证蓝色前景也就是按钮大小不变的情况下，按压时将透明shape那部分变成阴影，并且阴影变淡，这就达到效果了</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-e1156d59fea1b673.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="4-drawable"><a href="#4-drawable" class="headerlink" title="4. drawable"></a>4. drawable</h2><p>除了上面讲的shape,selector,layer-list，Android还有很多其他drawable资源</p><h3 id="普通图片"><a href="#普通图片" class="headerlink" title="普通图片"></a>普通图片</h3><p>图片格式可以是png(最常用，推荐使用)、jpg、gif，用图片资源需要根据不同屏幕密度提供多张不同尺寸的图片：</p><table><thead><tr><th>密度分类</th><th>密度值范围</th><th>代表分辨率</th><th>图标尺寸</th></tr></thead><tbody><tr><td>mdpi</td><td>120~160dpi</td><td>320x480px</td><td>48x48px</td><td></td></tr><tr><td>hdpi</td><td>160~240dpi</td><td>480x800px</td><td>72x72px</td><td></td></tr><tr><td>xhdpi</td><td>240~320dpi</td><td>720x1280px</td><td>96x96px</td><td></td></tr><tr><td>xxhdpi</td><td>320~480dpi</td><td>1080x1920px</td><td>144x144px</td><td></td></tr><tr><td>xxxhdpi</td><td>480~640dpi</td><td>1440x2560px</td><td>192x192px</td><td></td></tr></tbody></table><p>一张图片一般需要提供5张不同比例的图片，切图的话可以用下面这个网站在线切<br><a href="http://icon.wuruihong.com/" target="_blank" rel="external">http://icon.wuruihong.com/</a><br>Android Studio中也可以用Image Assetl来导入符合Materical Design设计的应用常用图标</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-575864176560c7ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt=""></p><h3 id="Vector-Drawable"><a href="#Vector-Drawable" class="headerlink" title="Vector Drawable"></a>Vector Drawable</h3><p>普通图片需要提供多张不同尺寸的图片，这会加大安装包的大小。而从Android 5.0开始支持的Vector可以自动进行适配，不需要通过分辨率来设置不同的图片，可以大幅减少图像的体积，同样一张图，用Vector来实现，可能只有PNG的几十分之一</p><p>利用Android Studio的Vector Asset，可以非常方便的创建Vector图像，也可以直接通过本地的SVG图像来生成Vector图像</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-b6885a0bab5eb75c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-9ca6a32c2724cd05.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt=""></p><h3 id="level-list"><a href="#level-list" class="headerlink" title="level-list"></a>level-list</h3><p>level-list管理一组drawable，每个drawable设置一组level范围，最终会根据level值选取对应的drawable绘制出来。level-list通过添加item子标签来添加相应的drawable，其下的item只有三个属性：</p><ul><li>android:drawable 指定drawable资源，如果不设置该属性，也可以定义drawable类型的子标签</li><li>android:minLevel 该item的最小level值</li><li>android:maxLevel 该item的最大level值</li></ul><p>用它来实现比如电量，信号强弱显示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;level-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class="line">    &lt;item android:maxLevel=&quot;100&quot; android:minLevel=&quot;100&quot;</div><div class="line">          android:drawable=&quot;@drawable/ic_battery_full_black_24dp&quot;/&gt;</div><div class="line">    &lt;item android:maxLevel=&quot;99&quot; android:minLevel=&quot;90&quot;</div><div class="line">          android:drawable=&quot;@drawable/ic_battery_90_black_24dp&quot;/&gt;</div><div class="line">    &lt;item android:maxLevel=&quot;89&quot; android:minLevel=&quot;80&quot;</div><div class="line">          android:drawable=&quot;@drawable/ic_battery_80_black_24dp&quot;/&gt;</div><div class="line">    &lt;item android:maxLevel=&quot;79&quot; android:minLevel=&quot;60&quot;</div><div class="line">          android:drawable=&quot;@drawable/ic_battery_60_black_24dp&quot;/&gt;</div><div class="line">    &lt;item android:maxLevel=&quot;59&quot; android:minLevel=&quot;50&quot;</div><div class="line">          android:drawable=&quot;@drawable/ic_battery_50_black_24dp&quot;/&gt;</div><div class="line">    &lt;item android:maxLevel=&quot;49&quot; android:minLevel=&quot;30&quot;</div><div class="line">          android:drawable=&quot;@drawable/ic_battery_30_black_24dp&quot;/&gt;</div><div class="line">    &lt;item android:maxLevel=&quot;29&quot; android:minLevel=&quot;20&quot;</div><div class="line">          android:drawable=&quot;@drawable/ic_battery_20_black_24dp&quot;/&gt;</div><div class="line">    &lt;item android:maxLevel=&quot;19&quot; android:minLevel=&quot;0&quot;</div><div class="line">        android:drawable=&quot;@drawable/ic_battery_alert_black_24dp&quot;/&gt;</div><div class="line">&lt;/level-list&gt;</div></pre></td></tr></table></figure></p><p>设置给ImageView<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;ImageView</div><div class="line">        android:id=&quot;@+id/iv_battery&quot;</div><div class="line">        android:layout_width=&quot;64dp&quot;</div><div class="line">        android:layout_height=&quot;64dp&quot;</div><div class="line">        android:src=&quot;@drawable/battery_level&quot;/&gt;</div></pre></td></tr></table></figure></p><p>代码中通过getDrawable().setLevel(level)设置level，这里每点一下减少10%电量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">level-=10;</div><div class="line">tvbattery.setText(level+&quot;&quot;);</div><div class="line">ivbattery.getDrawable().setLevel(level);</div></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-54f6b57e0fa24da0.gif?imageMogr2/auto-orient/strip" alt=""></p><p>item的匹配规则是从上到下的，当设置的level值与前面的item的level范围匹配，则采用。当从大到小排序下来，可以去掉每个item的android:maxLevel属性，比如上面，从小到大则可以去掉android:minLevel</p><h3 id="animation-list"><a href="#animation-list" class="headerlink" title="animation-list"></a>animation-list</h3><p>animation-list可以将一系列drawable构建成帧动画，就是将一个个drawable，一帧一帧的播放。通过添加item子标签设置每一帧使用的drawable资源，以及每一帧持续的时间。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;animation-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:oneshot=&quot;false&quot;&gt;</div><div class="line">    &lt;item android:drawable=&quot;@drawable/ic_wifi_signal_0&quot; android:duration=&quot;1000&quot;/&gt;</div><div class="line">    &lt;item android:drawable=&quot;@drawable/ic_wifi_signal_1&quot; android:duration=&quot;1000&quot;/&gt;</div><div class="line">    &lt;item android:drawable=&quot;@drawable/ic_wifi_signal_2&quot; android:duration=&quot;1000&quot;/&gt;</div><div class="line">    &lt;item android:drawable=&quot;@drawable/ic_wifi_signal_3&quot; android:duration=&quot;1000&quot;/&gt;</div><div class="line">    &lt;item android:drawable=&quot;@drawable/ic_wifi_signal_4&quot; android:duration=&quot;1000&quot;/&gt;</div><div class="line">&lt;/animation-list&gt;</div></pre></td></tr></table></figure></p><ul><li>android:oneshot属性设置是否循环播放，设为true时，只播放一轮就结束，设为false时，则会轮询播放。</li><li>android:duration属性设置该帧持续的时间，以毫秒数为单位。<br>设置给ImageView，在代码中<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">((AnimationDrawable)iv.getDrawable()).start();</div></pre></td></tr></table></figure></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/5734256-64727c525e24f384.gif?imageMogr2/auto-orient/strip" alt=""></p><p>animation-list对应的Drawable类为AnimationDrawable，要让动画运行起来，需要主动调用AnimationDrawable的start()方法。另外，如果在Activity的onCreate()方法里直接调用start()方法会没有效果，因为view还没有初始化完成是播放不了动画的。</p><h3 id="animated-rotate"><a href="#animated-rotate" class="headerlink" title="animated-rotate"></a>animated-rotate</h3><p>animated-rotate会让drawable不停地做旋转动画（不用在代码中启动）<br>animated-rotate可设置的属性只有四个：</p><ul><li>android:drawable 指定drawable资源，如果不设置该属性，也可以定义drawable类型的子标签</li><li>android:pivotX 旋转中心的X坐标</li><li>android:pivotY 旋转中心的Y坐标<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;animated-rotate xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:drawable=&quot;@drawable/bg_progressv&quot;</div><div class="line">    android:pivotX=&quot;50%&quot;</div><div class="line">    android:pivotY=&quot;50%&quot;&gt;</div><div class="line">&lt;/animated-rotate&gt;</div></pre></td></tr></table></figure></li></ul><p><strong>注意</strong>：50%不能写成0.5, 它们是不同的意思，50%是相对于控件，0.5是相对于整个屏幕</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-bd52a45fa5686d5f.gif?imageMogr2/auto-orient/strip" alt=""></p><p>##5. View Animation<br>未完</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/09/11/Android%E6%A0%B7%E5%BC%8F%E5%BC%80%E5%8F%91%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97/#disqus_thread</comments>
    </item>
    
    <item>
      <title>MQTT--服务器搭建</title>
      <link>http://yoursite.com/2017/09/11/MQTT--%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/</link>
      <guid>http://yoursite.com/2017/09/11/MQTT--%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/</guid>
      <pubDate>Mon, 11 Sep 2017 09:09:39 GMT</pubDate>
      <description>
      
        &lt;p&gt;MQTT由IBM的Andy Stanford-Clark博士和Arcom的Arlen Nipper（现为Eurotech）于1999年发明。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MQTT代表MQ遥测传输。它是针对受限设备和低带宽，高延迟或不可靠网络设计的发布/订阅，非常简单和轻便的消息传递协议。设计原则是尽量减少网络带宽和设备资源需求，同时还要确保可靠性和一定程度的交付保证。这些原则还可以使协议成为连接设备新兴的“机器对机器”（M2M）或“物联网”世界的理想选择，以及带宽和电池电量非常高的移动应用。&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>MQTT由IBM的Andy Stanford-Clark博士和Arcom的Arlen Nipper（现为Eurotech）于1999年发明。</p><blockquote><p>MQTT代表MQ遥测传输。它是针对受限设备和低带宽，高延迟或不可靠网络设计的发布/订阅，非常简单和轻便的消息传递协议。设计原则是尽量减少网络带宽和设备资源需求，同时还要确保可靠性和一定程度的交付保证。这些原则还可以使协议成为连接设备新兴的“机器对机器”（M2M）或“物联网”世界的理想选择，以及带宽和电池电量非常高的移动应用。</p></blockquote><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近要用arduino开发自主借还书的demo，通过mqtt协议发布数据到服务器，然后用APP订阅相应Topic接收数据，做相应处理。第一步先是搭建mqtt服务器，现在开源mqtt的broker比较多，最后还是选择了Apollo。当然如果不想自己搭建也可以用相应平台，比如阿里云的消息队列中有mqtt，以及物联网平台onenet等等（但是用他们要设置各种key和id，我试了能够连接，但publish始终不行，不知道是哪里设置错了）</p><h2 id="搭建MQTT服务器"><a href="#搭建MQTT服务器" class="headerlink" title="搭建MQTT服务器"></a>搭建MQTT服务器</h2><ol><li>下载apollo<br>下载地址<a href="http://activemq.apache.org/apollo/download.html" target="_blank" rel="external">http://activemq.apache.org/apollo/download.html</a></li></ol><p><img src="http://upload-images.jianshu.io/upload_images/5734256-9b44ff3349e31a8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ol><li>解压得到下面这些文件</li></ol><p><img src="http://upload-images.jianshu.io/upload_images/5734256-def7eb80037fd3a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>bin下包含apollo和apollo.cmd两个文件</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-dd813f6c408be1d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ol><li>打开cmd进入到bin目录下，输入<br><strong>apollo.cmd create mybroker</strong><br>mybroker是服务器名字任意，服务器实例包含了所有的配置，运行时数据等，并且和一个服务器进程关联。（注意：这里需要java环境，没得要下载jdk，并配置环境变量）</li></ol><p><img src="http://upload-images.jianshu.io/upload_images/5734256-b2041e3931f73894.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>完成后会多出一个mybroker文件夹</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-e7a96d437397014d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>其中etc中包含相关配置文件，apollo.xml是配置服务器信息的文件，users.properties文件包含连接MQTT服务器时用到的用户名和密码，后面登录网页会介绍，可以修改原始的admin=password，可以接着换行添加新的用户名密码。</p><ol><li><p>打开mybroker的bin目录，cmd进入到bin目录下，输入<br><strong>apollo-broker.cmd run</strong><br>开始运行，关闭cmd后会停止。或者可以install并run apollo-broker-service，让它长期在后台运行<br><img src="http://upload-images.jianshu.io/upload_images/5734256-c99d2e1f2d3dbee2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p>在浏览器中输入<a href="http://127.0.0.1:61680/" target="_blank" rel="external">http://127.0.0.1:61680/</a>或<a href="https://127.0.0.1:61681/" target="_blank" rel="external">https://127.0.0.1:61681/</a>进入web管理页面，输入默认admin，password</p></li></ol><p><img src="http://upload-images.jianshu.io/upload_images/5734256-238a00bc466140ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>队列和发布的Topic</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-208a733a18eaf406.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>连上的设备</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-56a51da0372bed86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>配置页面<br><img src="http://upload-images.jianshu.io/upload_images/5734256-f4e4118286f27b51.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ol><li>很多教程说到上面就没了，然后你试着用连接发现根本连不上，其实打开apollo.xml仔细看你会发现少配置了一个选项导致的，可以直接在web页面改</li></ol><p>这两处取消注释就可以连接上了，修改后保存会重新载入配置文件</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-c76509ece73e5c50.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ol><li>其他<br>在apollo.xml中</li></ol><p><img src="http://upload-images.jianshu.io/upload_images/5734256-ea1235a621a6aa33.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>上面两行是web管理登入链接，下面第一个是tcp方式连接是端口，可以自行更改，比如一般默认1883端口</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/09/11/MQTT--%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
