<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>这儿有一只企鹅</title>
    <link>http://yoursite.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>走过的人说树枝长了，走过的人说树枝在长</description>
    <pubDate>Mon, 11 Sep 2017 10:59:33 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>MQTT--服务器搭建</title>
      <link>http://yoursite.com/2017/09/11/MQTT--%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/</link>
      <guid>http://yoursite.com/2017/09/11/MQTT--%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/</guid>
      <pubDate>Mon, 11 Sep 2017 09:09:39 GMT</pubDate>
      <description>
      
        &lt;p&gt;MQTT由IBM的Andy Stanford-Clark博士和Arcom的Arlen Nipper（现为Eurotech）于1999年发明。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MQTT代表MQ遥测传输。它是针对受限设备和低带宽，高延迟或不可靠网络设计的发布/订阅，非常简单和轻便的消息传递协议。设计原则是尽量减少网络带宽和设备资源需求，同时还要确保可靠性和一定程度的交付保证。这些原则还可以使协议成为连接设备新兴的“机器对机器”（M2M）或“物联网”世界的理想选择，以及带宽和电池电量非常高的移动应用。&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>MQTT由IBM的Andy Stanford-Clark博士和Arcom的Arlen Nipper（现为Eurotech）于1999年发明。</p><blockquote><p>MQTT代表MQ遥测传输。它是针对受限设备和低带宽，高延迟或不可靠网络设计的发布/订阅，非常简单和轻便的消息传递协议。设计原则是尽量减少网络带宽和设备资源需求，同时还要确保可靠性和一定程度的交付保证。这些原则还可以使协议成为连接设备新兴的“机器对机器”（M2M）或“物联网”世界的理想选择，以及带宽和电池电量非常高的移动应用。</p></blockquote><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近要用arduino开发自主借还书的demo，通过mqtt协议发布数据到服务器，然后用APP订阅相应Topic接收数据，做相应处理。第一步先是搭建mqtt服务器，现在开源mqtt的broker比较多，最后还是选择了Apollo。当然如果不想自己搭建也可以用相应平台，比如阿里云的消息队列中有mqtt，以及物联网平台onenet等等（但是用他们要设置各种key和id，我试了能够连接，但publish始终不行，不知道是哪里设置错了）</p><h2 id="搭建MQTT服务器"><a href="#搭建MQTT服务器" class="headerlink" title="搭建MQTT服务器"></a>搭建MQTT服务器</h2><ol><li>下载apollo<br>下载地址<a href="http://activemq.apache.org/apollo/download.html" target="_blank" rel="external">http://activemq.apache.org/apollo/download.html</a></li></ol><p><img src="http://upload-images.jianshu.io/upload_images/5734256-9b44ff3349e31a8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ol><li>解压得到下面这些文件</li></ol><p><img src="http://upload-images.jianshu.io/upload_images/5734256-def7eb80037fd3a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>bin下包含apollo和apollo.cmd两个文件</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-dd813f6c408be1d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ol><li>打开cmd进入到bin目录下，输入<br><strong>apollo.cmd create mybroker</strong><br>mybroker是服务器名字任意，服务器实例包含了所有的配置，运行时数据等，并且和一个服务器进程关联。（注意：这里需要java环境，没得要下载jdk，并配置环境变量）</li></ol><p><img src="http://upload-images.jianshu.io/upload_images/5734256-b2041e3931f73894.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>完成后会多出一个mybroker文件夹</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-e7a96d437397014d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>其中etc中包含相关配置文件，apollo.xml是配置服务器信息的文件，users.properties文件包含连接MQTT服务器时用到的用户名和密码，后面登录网页会介绍，可以修改原始的admin=password，可以接着换行添加新的用户名密码。</p><ol><li><p>打开mybroker的bin目录，cmd进入到bin目录下，输入<br><strong>apollo-broker.cmd run</strong><br>开始运行，关闭cmd后会停止。或者可以install并run apollo-broker-service，让它长期在后台运行<br><img src="http://upload-images.jianshu.io/upload_images/5734256-c99d2e1f2d3dbee2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p>在浏览器中输入<a href="http://127.0.0.1:61680/" target="_blank" rel="external">http://127.0.0.1:61680/</a>或<a href="https://127.0.0.1:61681/" target="_blank" rel="external">https://127.0.0.1:61681/</a>进入web管理页面，输入默认admin，password</p></li></ol><p><img src="http://upload-images.jianshu.io/upload_images/5734256-238a00bc466140ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>队列和发布的Topic</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-208a733a18eaf406.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>连上的设备</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-56a51da0372bed86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>配置页面<br><img src="http://upload-images.jianshu.io/upload_images/5734256-f4e4118286f27b51.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ol><li>很多教程说到上面就没了，然后你试着用连接发现根本连不上，其实打开apollo.xml仔细看你会发现少配置了一个选项导致的，可以直接在web页面改</li></ol><p>这两处取消注释就可以连接上了，修改后保存会重新载入配置文件</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-c76509ece73e5c50.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ol><li>其他<br>在apollo.xml中</li></ol><p><img src="http://upload-images.jianshu.io/upload_images/5734256-ea1235a621a6aa33.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>上面两行是web管理登入链接，下面第一个是tcp方式连接是端口，可以自行更改，比如一般默认1883端口</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/09/11/MQTT--%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/#disqus_thread</comments>
    </item>
    
    <item>
      <title>MQTT--NodeMCU及MQTT接发消息体验</title>
      <link>http://yoursite.com/2017/09/11/MQTT--NodeMCU%E5%8F%8AMQTT%E6%8E%A5%E5%8F%91%E6%B6%88%E6%81%AF%E4%BD%93%E9%AA%8C/</link>
      <guid>http://yoursite.com/2017/09/11/MQTT--NodeMCU%E5%8F%8AMQTT%E6%8E%A5%E5%8F%91%E6%B6%88%E6%81%AF%E4%BD%93%E9%AA%8C/</guid>
      <pubDate>Mon, 11 Sep 2017 04:32:55 GMT</pubDate>
      <description>
      
        &lt;p&gt;使用MQTT先要有一个MQTT服务器，具体如何搭建可以看上一篇文章&lt;a href=&quot;http://www.jianshu.com/p/e11a47f1e53c&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/e11a47f1e53c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这一篇主要讲下NodeMCU的使用，以及MQTT介绍和如何接发消息&lt;/p&gt;
&lt;h2 id=&quot;NodeMCU&quot;&gt;&lt;a href=&quot;#NodeMCU&quot; class=&quot;headerlink&quot; title=&quot;NodeMCU&quot;&gt;&lt;/a&gt;NodeMCU&lt;/h2&gt;&lt;h3 id=&quot;ESP8266介绍&quot;&gt;&lt;a href=&quot;#ESP8266介绍&quot; class=&quot;headerlink&quot; title=&quot;ESP8266介绍&quot;&gt;&lt;/a&gt;ESP8266介绍&lt;/h3&gt;&lt;p&gt;介绍NodeMCU前需要先了解ESP8266，它是一个完整自称体系的WiFi网络解决方案，能独立运行也可为从部件连接单片机运行&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>使用MQTT先要有一个MQTT服务器，具体如何搭建可以看上一篇文章<a href="http://www.jianshu.com/p/e11a47f1e53c" target="_blank" rel="external">http://www.jianshu.com/p/e11a47f1e53c</a></p><p>这一篇主要讲下NodeMCU的使用，以及MQTT介绍和如何接发消息</p><h2 id="NodeMCU"><a href="#NodeMCU" class="headerlink" title="NodeMCU"></a>NodeMCU</h2><h3 id="ESP8266介绍"><a href="#ESP8266介绍" class="headerlink" title="ESP8266介绍"></a>ESP8266介绍</h3><p>介绍NodeMCU前需要先了解ESP8266，它是一个完整自称体系的WiFi网络解决方案，能独立运行也可为从部件连接单片机运行</p><a id="more"></a><p>具有以下特点：</p><ul><li>超小尺寸</li><li>低功耗</li><li>内置TCP/IP协议</li><li>可编程</li><li>低成本</li></ul><h3 id="NodeMCU介绍"><a href="#NodeMCU介绍" class="headerlink" title="NodeMCU介绍"></a>NodeMCU介绍</h3><p>NodeMCU是一款基于ESP8266模块的开源硬件，符合Arduino框架。同时可使用Node.js编程</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-f76e3ee2bd0a2c78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="NodeMCU"></p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-b146c6aeacefa406.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="引脚"></p><h3 id="WiFi测试"><a href="#WiFi测试" class="headerlink" title="WiFi测试"></a>WiFi测试</h3><p>先要安装Arduino IDE For ESP8266<br>Arduino IDE For ESP8266是根据Arduino修改的专门烧写ESP8266开发板的IDE。在装好Arduino IDE后：</p><ol><li>打开Arduino 文件-&gt;首选项，在 附加开发管理网站 中填入<a href="http://arduino.esp8266.com/stable/package_esp8266com_index.json，然后点击确定保存" target="_blank" rel="external">http://arduino.esp8266.com/stable/package_esp8266com_index.json，然后点击确定保存</a></li></ol><p><img src="http://upload-images.jianshu.io/upload_images/5734256-e9d6b0b4bc008b9d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ol><li>重启IDE后，打开 工具-&gt;开发板-&gt;开发板管理器；搜索ESP8266，选择esp 8266 by ESP8266 Community安装</li></ol><p><img src="http://upload-images.jianshu.io/upload_images/5734256-aebe695f0a4fbea8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ol><li>下载完成后可以在开发板选项中看到ESP8266 Module,以及NodeMCU等可选开发板</li></ol><ul><li>将NodeMCU通过usb连接到电脑，在工具下选择相应配置</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/5734256-e5d0a735273d4681.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>波特率越大烧录程序速度越快但有可能出错<br>端口选择NodeMCU对应端口，如果没看到端口，那是驱动没有装，装驱动可以看这里<a href="http://www.arduino.cn/thread-1008-1-1.html" target="_blank" rel="external">http://www.arduino.cn/thread-1008-1-1.html</a></p><ol><li>打开示例选择ESP8266WiFi中的WiFiScan</li></ol><p><img src="http://upload-images.jianshu.io/upload_images/5734256-976b7c3babf87b5a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>烧到板子上打开窗口监视器可以看到扫描出来的附近热点</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-6523a0a7a15c39dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="MQTT"><a href="#MQTT" class="headerlink" title="MQTT"></a>MQTT</h2><h3 id="MQTT介绍"><a href="#MQTT介绍" class="headerlink" title="MQTT介绍"></a>MQTT介绍</h3><p>消息队列遥测传输(MQTT)是IBM开发的即时通讯协议，为计算能力有限且工作在低带宽、不可靠网络的传感器或控制设备而设计。比如对于移动开发，它可以用于消息推送，即时通讯等等</p><p><strong>特性：</strong></p><ul><li>发布/订阅的消息模式，提供一对多的消息发布</li><li>使用TCP/IP提供网络连接</li><li>有三种消息发布服务质量，至多一次，至少一次，只有一次</li><li>传输小、开销小</li><li>LastWill通知中断机制</li></ul><h3 id="MQTT原理介绍"><a href="#MQTT原理介绍" class="headerlink" title="MQTT原理介绍"></a>MQTT原理介绍</h3><ul><li>客户端：发布者(Publish)、订阅者(SubScribe)，客户端有ID,ID冲突会挤掉先连接客户端。</li><li>服务器端：代理(Broker)</li><li>消息：主题(Topic)+负载(payload)</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/5734256-aa7c5afc06cb32e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>举个场景为例：</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-923125333073a289.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>QQ用户2(账号QQ1000)向QQ用户1(QQ9999)发送消息“Hello World”.<br>发送者：QQ用户2<br>订阅者：QQ用户1<br>消息：QQ9999+”Hello World”.</p><p>消息发送至服务器，服务器查找QQ9999对应的用户后，发送信息给QQ用户2.</p><h3 id="MQTT-ESP8266库"><a href="#MQTT-ESP8266库" class="headerlink" title="MQTT ESP8266库"></a>MQTT ESP8266库</h3><p>菜单“项目”-“加载库”-“管理库”，搜索安装“PubSubClient”</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-3a3ea6f9bdea82e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>PubSubClient有一些示例可以打开mqtt_esp8266看下</p><h3 id="MQTT接发消息体验"><a href="#MQTT接发消息体验" class="headerlink" title="MQTT接发消息体验"></a>MQTT接发消息体验</h3><p>这里做两个示例<br><strong>1. NodeMCU发布消息：光照强度传感器测得环境光照强度发布到服务器，手机订阅该Topic接收光强信息</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">#include &lt;ESP8266WiFi.h&gt;</div><div class="line">#include &lt;PubSubClient.h&gt;</div><div class="line">int pinLED = D2;</div><div class="line"></div><div class="line">const char* ssid = &quot;********&quot;;//连接的路由器的名字</div><div class="line">const char* password = &quot;********&quot;;//连接的路由器的密码</div><div class="line">const char* mqtt_server = &quot;********&quot;;//服务器的地址 </div><div class="line">const int port=****;//服务器端口号</div><div class="line"></div><div class="line">WiFiClient espClient;</div><div class="line">PubSubClient client(espClient);</div><div class="line"></div><div class="line">int light=255;</div><div class="line"></div><div class="line">void setup_wifi() &#123;//自动连WIFI接入网络</div><div class="line">  delay(10);</div><div class="line">  WiFi.begin(ssid, password);</div><div class="line">  while (WiFi.status() != WL_CONNECTED) &#123;</div><div class="line">    delay(500);</div><div class="line">    Serial.print(&quot;...&quot;);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void callback(char* topic, byte* payload, unsigned int length) &#123;//用于接收数据</div><div class="line">  int l=0;</div><div class="line">  int p=1;</div><div class="line">  for (int i = length-1; i &gt;=0; i--) &#123;</div><div class="line">    l+=(int)((char)payload[i]-&apos;0&apos;)*p;</div><div class="line">    p*=10;</div><div class="line">  &#125;</div><div class="line">  light=l;</div><div class="line">  Serial.println(l);//换行</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">void reconnect() &#123;//等待，直到连接上服务器</div><div class="line">  while (!client.connected()) &#123;//如果没有连接上</div><div class="line">    if (client.connect(&quot;biloba&quot;)+random(999999999)) &#123;//接入时的用户名，尽量取一个很不常用的用户名</div><div class="line">      client.subscribe(&quot;LED&quot;);//接收外来的数据时的intopic</div><div class="line">    &#125; else &#123;</div><div class="line">      Serial.print(&quot;failed, rc=&quot;);//连接失败</div><div class="line">      Serial.print(client.state());//重新连接</div><div class="line">      Serial.println(&quot; try again in 5 seconds&quot;);//延时5秒后重新连接</div><div class="line">      delay(5000);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">void setup() &#123;//初始化程序，只运行一遍</div><div class="line">  Serial.begin(9600);//设置串口波特率（与烧写用波特率不是一个概念）</div><div class="line">  setup_wifi();//自动连WIFI接入网络</div><div class="line">  client.setServer(mqtt_server, port);//端口号</div><div class="line">  client.setCallback(callback); //用于接收服务器接收的数据</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">void loop() &#123;//主循环</div><div class="line">   reconnect();//确保连上服务器，否则一直等待。</div><div class="line">   client.loop();//MUC接收数据的主循环函数。</div><div class="line">   analogWrite(pinLED,light);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>先使用ESP8266WiFi库的方法连接一个wifi，连接成功后loop中获取光强并转换为json格式，发布到light的Topic主题下，可以打开服务器web管理页面，可以在Topic找到它</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-ca912322e21209c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>接着试着用手机app订阅接收传感器发的消息（具体Android端如何实现下篇文章会讲到），在google play中下载一个myMqtt的APP，不方便的可以在这里下<a href="http://pan.baidu.com/s/1slE0cw9" target="_blank" rel="external">http://pan.baidu.com/s/1slE0cw9</a></p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-a1977b4df2a183a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/440" alt=""></p><p>打开APP，在setting中设置你服务器ip，端口等保存，如果顶部显示绿色表明连接成功，在Subscribe中订阅light主题，返回到Dashboard就能实时收到消息</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-7c3b1d6129b14cc8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/440" alt=""></p><p><strong>1. NodeMCU接收消息：连接一个led灯，用手机APP控制灯的亮度</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">#include &lt;ESP8266WiFi.h&gt;</div><div class="line">#include &lt;PubSubClient.h&gt;</div><div class="line">#include &lt;math.h&gt;</div><div class="line">int pinLED = D2;</div><div class="line"></div><div class="line">const char* ssid = &quot;********&quot;;//连接的路由器的名字</div><div class="line">const char* password = &quot;********&quot;;//连接的路由器的密码</div><div class="line">const char* mqtt_server = &quot;********&quot;;//服务器的地址 </div><div class="line">const int port=****;//服务器端口号</div><div class="line"></div><div class="line">WiFiClient espClient;</div><div class="line">PubSubClient client(espClient);</div><div class="line"></div><div class="line">int light=1024;//led的亮度值</div><div class="line"></div><div class="line">void setup_wifi() &#123;//自动连WIFI接入网络</div><div class="line">  delay(10);</div><div class="line">  WiFi.begin(ssid, password);</div><div class="line">  while (WiFi.status() != WL_CONNECTED) &#123;</div><div class="line">    delay(500);</div><div class="line">    Serial.print(&quot;...&quot;);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void callback(char* topic, byte* payload, unsigned int length) &#123;//用于接收数据</div><div class="line">  //将char* 转换为int</div><div class="line">  int l=0;</div><div class="line">  int p=1;</div><div class="line">  for (int i = length-1; i &gt;=0; i--) &#123;</div><div class="line">    l+=(int)((char)payload[i]-&apos;0&apos;)*p;</div><div class="line">    p*=10;</div><div class="line">  &#125;</div><div class="line">  light=l;//赋值给light</div><div class="line">  Serial.println(l);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">void reconnect() &#123;//等待，直到连接上服务器</div><div class="line">  while (!client.connected()) &#123;//如果没有连接上</div><div class="line">    if (client.connect(&quot;biloba&quot;)+random(999999999)) &#123;//接入时的用户名，尽量取一个很不常用的用户名</div><div class="line">      client.subscribe(&quot;LED&quot;);//接收外来的数据时的intopic</div><div class="line">    &#125; else &#123;</div><div class="line">      Serial.print(&quot;failed, rc=&quot;);//连接失败</div><div class="line">      Serial.print(client.state());//重新连接</div><div class="line">      Serial.println(&quot; try again in 5 seconds&quot;);//延时5秒后重新连接</div><div class="line">      delay(5000);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">void setup() &#123;//初始化程序，只运行一遍</div><div class="line">  Serial.begin(9600);//设置串口波特率（与烧写用波特率不是一个概念）</div><div class="line">  setup_wifi();//自动连WIFI接入网络</div><div class="line">  client.setServer(mqtt_server, port);//端口号</div><div class="line">  client.setCallback(callback); //用于接收服务器接收的数据</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">void loop() &#123;//主循环</div><div class="line">   reconnect();//确保连上服务器，否则一直等待。</div><div class="line">   client.loop();//MUC接收数据的主循环函数。</div><div class="line">   analogWrite(pinLED,light);//设置led亮度</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>代码跟上面没太大区别，只不过这里不发信息了，而接收LED Topic的信息，接收到转换为int设置为灯的亮度，这样就实现远程app控灯。打开myMqtt的publish，输入Topic为LED，Message为灯的亮度（0-1024），可以实时控制灯</p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-b3b86a653aac87f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/440" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-42acf9547f5dbcba.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/440" alt="1024"></p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-45583bdf40140037.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/440" alt="100"></p><p><img src="http://upload-images.jianshu.io/upload_images/5734256-e2519a594b7b13df.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/440" alt="0"></p>]]></content:encoded>
      
      <comments>http://yoursite.com/2017/09/11/MQTT--NodeMCU%E5%8F%8AMQTT%E6%8E%A5%E5%8F%91%E6%B6%88%E6%81%AF%E4%BD%93%E9%AA%8C/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
